<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - EEBONDの博客</title>
        <link>https://eebond.github.io/posts/</link>
        <description>所有文章 | EEBONDの博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>eebond0327@gmail.com (eebond)</managingEditor>
            <webMaster>eebond0327@gmail.com (eebond)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 17 May 2022 12:28:13 &#43;0800</lastBuildDate><atom:link href="https://eebond.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>如何将博客推送到个人服务器并自动部署</title>
    <link>https://eebond.github.io/%E5%A6%82%E4%BD%95%E5%B0%86%E5%8D%9A%E5%AE%A2%E6%8E%A8%E9%80%81%E5%88%B0%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</link>
    <pubDate>Tue, 17 May 2022 12:28:13 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://eebond.github.io/%E5%A6%82%E4%BD%95%E5%B0%86%E5%8D%9A%E5%AE%A2%E6%8E%A8%E9%80%81%E5%88%B0%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</guid>
    <description><![CDATA[]]></description>
</item><item>
    <title>如何注册购买搬瓦工VPS</title>
    <link>https://eebond.github.io/%E5%A6%82%E4%BD%95%E6%B3%A8%E5%86%8C%E8%B4%AD%E4%B9%B0%E6%90%AC%E7%93%A6%E5%B7%A5vps/</link>
    <pubDate>Mon, 16 May 2022 22:21:10 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://eebond.github.io/%E5%A6%82%E4%BD%95%E6%B3%A8%E5%86%8C%E8%B4%AD%E4%B9%B0%E6%90%AC%E7%93%A6%E5%B7%A5vps/</guid>
    <description><![CDATA[<h2 id="注册搬瓦工账号">注册搬瓦工账号</h2>
<p><a href="https://bandwagonhost.com/aff.php?aff=66138" target="_blank" rel="noopener noreffer">搬瓦工官网</a></p>
<p>进入搬瓦工官网，如下图所示。</p>
<p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220516222826.png" title=" " data-thumbnail="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220516222826.png" data-sub-html="<h2> </h2><p> </p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<p>点击官网右上角的Register按钮，进入注册页面，如图所示。</p>
<p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220516223531.png" title=" " data-thumbnail="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220516223531.png" data-sub-html="<h2> </h2><p> </p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<p>填写相关信息，注意手机号码要11位，密码要显示绿色Strong，反面教材如图所示。</p>
<p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220516223902.png" title=" " data-thumbnail="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220516223902.png" data-sub-html="<h2> </h2><p> </p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<p>点击提交后进入邮箱验证界面，查看注册邮箱的邮件，填写验证码</p>
<p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220516224217.png" title=" " data-thumbnail="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220516224217.png" data-sub-html="<h2> </h2><p> </p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<p>验证成功之后进入用户服务主界面</p>
<p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220516224451.png" title=" " data-thumbnail="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220516224451.png" data-sub-html="<h2> </h2><p> </p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<h2 id="选购搬瓦工vps">选购搬瓦工VPS</h2>
<p>点击Order New Services选项，如果所示。</p>
<p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220516224813.png" title=" " data-thumbnail="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220516224813.png" data-sub-html="<h2> </h2><p> </p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<p>进入All VPS services界面，里面展示了所有搬瓦工cn2线路的机器。这里我们本着最便宜的原则选择最便宜的$49.99套餐点击Order Now,其实用的还行，晚高峰不稳定。</p>
<p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220516225233.png" title=" " data-thumbnail="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220516225233.png" data-sub-html="<h2> </h2><p> </p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<p>如图所示，点击Add to Cart，添加到购物车。</p>
<p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220516230102.png" title=" " data-thumbnail="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220516230102.png" data-sub-html="<h2> </h2><p> </p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<p>购物车界面如果所示，填写优惠码BWH3HYATVBJW，点击Validate Code按钮验证优惠码，之后点击checkout按钮。</p>
<p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220516230614.png" title=" " data-thumbnail="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220516230614.png" data-sub-html="<h2> </h2><p> </p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<p>进入支付选择界面，选用支付宝支付，即选择Alipay选项，点击提交，如图所示。</p>
<p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220516230710.png" title=" " data-thumbnail="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220516230710.png" data-sub-html="<h2> </h2><p> </p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<p>确认支付界面如图所示，点击Make payment按钮。</p>
<p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220516230932.png" title=" " data-thumbnail="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220516230932.png" data-sub-html="<h2> </h2><p> </p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220516231039.png" title=" " data-thumbnail="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220516231039.png" data-sub-html="<h2> </h2><p> </p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<p>之后完成支付即可。</p>
]]></description>
</item><item>
    <title>Linux实现免密登录以及密钥生成方法</title>
    <link>https://eebond.github.io/linux%E5%AE%9E%E7%8E%B0%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E4%BB%A5%E5%8F%8A%E5%AF%86%E9%92%A5%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/</link>
    <pubDate>Sun, 15 May 2022 19:02:31 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://eebond.github.io/linux%E5%AE%9E%E7%8E%B0%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E4%BB%A5%E5%8F%8A%E5%AF%86%E9%92%A5%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/</guid>
    <description><![CDATA[<h2 id="前言">前言</h2>
<p>本文主要讲述实现从一台Linux服务器实现对另一台Linux服务器的
免密登录，还有在linux上生成ssh key密钥的方法。</p>
<hr>
<h2 id="生成ssh-key密钥文件">生成SSH KEY密钥文件</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ssh-keygen -t rsa
</span></span></code></pre></td></tr></table>
</div>
</div><p>用户家目录中的.ssh目录下出现如下文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">authorized_keys  #认证用户的公钥，认证用户可以免密登录当前账户
</span></span><span class="line"><span class="cl">id_rsa           #当前用户的密钥
</span></span><span class="line"><span class="cl">id_rsa.pub       #当前用户的公钥  
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="设置免密登录">设置免密登录</h2>
<p>其实免密登录的原理就是把当前用户的公钥放到被登录用户的authorized_keys文件中去。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ssh-copy-id root@144.34.163.167 -p <span class="m">29488</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>期间需要输入被登录用户的密码才能将当前用户的公钥放入被登录用户的authorized_keys文件中去。<br>
还有个办法就是复制当前用户的公钥直接粘贴到被登录用户的authorized_keys文件中去。</p>
<p>如果被登录的Linux的端口不是默认的22端口，则要用 -p 选项来指定登录端口。</p>
<h2 id="尝试免密登录">尝试免密登录</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ssh root@144.34.163.167 -p <span class="m">29488</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>成功免密登录！</p>
]]></description>
</item><item>
    <title>Linux中安装配置JDK8</title>
    <link>https://eebond.github.io/linux%E4%B8%AD%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEjdk8/</link>
    <pubDate>Sun, 17 Apr 2022 20:01:48 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://eebond.github.io/linux%E4%B8%AD%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEjdk8/</guid>
    <description><![CDATA[<h2 id="前言">前言</h2>
<blockquote>
<p>学习JAVA需要安装配置jdk环境，太多数时候会在Linux环境中配置jdk，本篇以Centos7为例配置jdk8，以便日后参考，快速配置环境。</p>
</blockquote>
<hr>
<h2 id="安装配置">安装配置</h2>
<h3 id="下载jdk8">下载jdk8</h3>
<p>1.通过<a href="https://www.oracle.com/java/technologies/downloads/#java8" target="_blank" rel="noopener noreffer">oracle官网下载</a></p>
<p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220417201328.png" title=" " data-thumbnail="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220417201328.png" data-sub-html="<h2> </h2><p> </p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<p>但是官网下载，需要Oracle账号。网上找到得账号：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">1287019365@qq.com
</span></span><span class="line"><span class="cl">Oracle@1234
</span></span></code></pre></td></tr></table>
</div>
</div><p>2.通过wget下载我的私有云盘里的jdk8备份</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget jdk-8u321-linux-x64.tar.gz https://cloud.eebond.xyz/api/v3/file/get/194/jdk-8u321-linux-x64.tar.gz?sign<span class="o">=</span>bvDVYkfqvYU4jv86no9qpC6Sw7n2opQLA6CtcU_W-EI%3D%3A0
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="配置">配置</h3>
<p>1、 解压jdk-8u321-linux-x64.tar.gz到指定目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir /usr/java <span class="o">&amp;&amp;</span> tar -zxvf jdk-8u321-linux-x64.tar.gz -C /usr/java/
</span></span></code></pre></td></tr></table>
</div>
</div><p>2、 配置环境变量</p>
<p>打开配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim /etc/profile
</span></span></code></pre></td></tr></table>
</div>
</div><p>编写配置文件内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">export JAVA_HOME=/usr/java/jdk1.8.0_321
</span></span><span class="line"><span class="cl">export PATH=$JAVA_HOME/bin:$PATH
</span></span><span class="line"><span class="cl">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
</span></span></code></pre></td></tr></table>
</div>
</div><p>使更新后的配置文件生效</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">source</span> /etc/profile
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="验证使用jdk">验证使用jdk</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">java -version 
</span></span><span class="line"><span class="cl">javac
</span></span></code></pre></td></tr></table>
</div>
</div><p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220417203744.png" title=" " data-thumbnail="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220417203744.png" data-sub-html="<h2> </h2><p> </p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
]]></description>
</item><item>
    <title>CentOS7安装部署Trojan-go</title>
    <link>https://eebond.github.io/centos7%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2trojan-go/</link>
    <pubDate>Thu, 07 Apr 2022 18:05:43 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://eebond.github.io/centos7%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2trojan-go/</guid>
    <description><![CDATA[<h2 id="前言">前言</h2>
<blockquote>
<p>Trojan-goTrojan-Go是使用Go语言实现的完整的Trojan代理，和Trojan协议以及原版的配置文件格式兼容。支持并且兼容Trojan-GFW版本的绝大多数功能，并扩展了更多的实用功能。</p>
</blockquote>
<blockquote>
<p>Trojan-Go的的首要目标是保障传输安全性和隐蔽性。在此前提下，尽可能提升传输性能和易用性。</p>
</blockquote>
<blockquote>
<p>Trojan-Go<a href="https://p4gefau1t.github.io/trojan-go/" target="_blank" rel="noopener noreffer">官方文档</a>,可以详细阅读，了解trojan的原理。</p>
</blockquote>
<blockquote>
<p>Trojan-Go和V2ray + WS + TLS一样是目前比较稳定的科学上网方式，shadowsocks已经能被墙识别，搬瓦工秒被封端口。</p>
</blockquote>
<h2 id="安装trojan-go">安装Trojan-Go</h2>
<h3 id="申请tls证书">申请TLS证书</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">certbot certonly --standalone -d trojan.eebond.xyz
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>如果当前有nginx正在运行，先关闭nginx。</p>
</blockquote>
<p>查看证书是否安装成功</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">certbot certificates
</span></span></code></pre></td></tr></table>
</div>
</div><p>证书安装路径</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Certificate Path: /etc/letsencrypt/live/trojan.eebond.xyz/fullchain.pem
</span></span><span class="line"><span class="cl">Private Key Path: /etc/letsencrypt/live/trojan.eebond.xyz/privkey.pem
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="安装配置nginx">安装配置Nginx</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yum install nginx -y
</span></span></code></pre></td></tr></table>
</div>
</div><p>网站配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim /etc/nginx/conf.d/trojan.conf
</span></span></code></pre></td></tr></table>
</div>
</div><p>文件内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">server {
</span></span><span class="line"><span class="cl">        listen       1239;
</span></span><span class="line"><span class="cl">        root         /srv/www/blog;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    server {
</span></span><span class="line"><span class="cl">        listen       1001;
</span></span><span class="line"><span class="cl">        root         /srv/www/blog;
</span></span><span class="line"><span class="cl">    }
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="安装配置trojan-go">安装配置trojan-go</h3>
<h4 id="下载安装trojan-go">下载安装trojan-go</h4>
<blockquote>
<p>在 <a href="https://github.com/p4gefau1t/trojan-go/releases" target="_blank" rel="noopener noreffer">https://github.com/p4gefau1t/trojan-go/releases</a> 查看下载链接，下载解压至 /usr/local/trojan-go目录</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget https://github.com/p4gefau1t/trojan-go/releases/download/v0.10.6/trojan-go-linux-amd64.zip  
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="配置trojan-go">配置trojan-go</h4>
<p>将example目录下的 server.json 复制到/usr/local/trojan-go目录，修改为如下内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">    &#34;run_type&#34;: &#34;server&#34;,
</span></span><span class="line"><span class="cl">    &#34;local_addr&#34;: &#34;0.0.0.0&#34;,
</span></span><span class="line"><span class="cl">    &#34;local_port&#34;: 447,
</span></span><span class="line"><span class="cl">    &#34;remote_addr&#34;: &#34;127.0.0.1&#34;,
</span></span><span class="line"><span class="cl">    &#34;remote_port&#34;: 1001,
</span></span><span class="line"><span class="cl">    &#34;password&#34;: [
</span></span><span class="line"><span class="cl">        &#34;5f45307f-a867-05de-3913-ff539f92325f&#34;
</span></span><span class="line"><span class="cl">    ],
</span></span><span class="line"><span class="cl">    &#34;ssl&#34;: {
</span></span><span class="line"><span class="cl">        &#34;verify&#34;: true,
</span></span><span class="line"><span class="cl">        &#34;verify_hostname&#34;: true,
</span></span><span class="line"><span class="cl">        &#34;cert&#34;: &#34;/etc/letsencrypt/live/trojan.eebond.xyz/fullchain.pem&#34;,
</span></span><span class="line"><span class="cl">        &#34;key&#34;: &#34;/etc/letsencrypt/live/trojan.eebond.xyz/privkey.pem&#34;,
</span></span><span class="line"><span class="cl">        &#34;sni&#34;: &#34;trojan.eebond.xyz&#34;,
</span></span><span class="line"><span class="cl">	&#34;fallback_addr&#34;: &#34;127.0.0.1&#34;,
</span></span><span class="line"><span class="cl">	&#34;fallback_port&#34;: 1239
</span></span><span class="line"><span class="cl">    },
</span></span><span class="line"><span class="cl">    &#34;router&#34;: {
</span></span><span class="line"><span class="cl">        &#34;enabled&#34;: true,
</span></span><span class="line"><span class="cl">        &#34;block&#34;: [
</span></span><span class="line"><span class="cl">            &#34;geoip:private&#34;
</span></span><span class="line"><span class="cl">        ],
</span></span><span class="line"><span class="cl">        &#34;geoip&#34;: &#34;/usr/local/trojan-go/geoip.dat&#34;,
</span></span><span class="line"><span class="cl">        &#34;geosite&#34;: &#34;/usr/local/trojan-go/geosite.dat&#34;
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="创建systemctl启动文件">创建systemctl启动文件</h4>
<p>1.复制启动文件至系统服务目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cp /usr/local/trojan-go/example/trojan-go.service /usr/lib/systemd/system/
</span></span></code></pre></td></tr></table>
</div>
</div><p>2.修改启动文件，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">[Unit]
</span></span><span class="line"><span class="cl">Description=Trojan-Go - An unidentifiable mechanism that helps you bypass GFW
</span></span><span class="line"><span class="cl">Documentation=https://p4gefau1t.github.io/trojan-go/
</span></span><span class="line"><span class="cl">After=network.target nss-lookup.target
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[Service]
</span></span><span class="line"><span class="cl">User=root
</span></span><span class="line"><span class="cl">CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
</span></span><span class="line"><span class="cl">AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
</span></span><span class="line"><span class="cl">NoNewPrivileges=true
</span></span><span class="line"><span class="cl">ExecStart=/usr/local/trojan-go/trojan-go -config /usr/local/trojan-go/server.json
</span></span><span class="line"><span class="cl">Restart=on-failure
</span></span><span class="line"><span class="cl">RestartSec=10s
</span></span><span class="line"><span class="cl">LimitNOFILE=infinity
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[Install]
</span></span><span class="line"><span class="cl">WantedBy=multi-user.target
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注意修改User和ExecStart，否则无法自启动</p>
</blockquote>
<p>3.启动服务&amp;设置开机启动</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">systemctl daemon-reload
</span></span><span class="line"><span class="cl">systemctl start trojan-go
</span></span><span class="line"><span class="cl">systemctl <span class="nb">enable</span> trojan-go
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后就可以在客户端快乐的使用了！</p>
]]></description>
</item><item>
    <title>CentOS7 安装部署Shadowsocks</title>
    <link>https://eebond.github.io/centos7-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2shadowsocks/</link>
    <pubDate>Thu, 07 Apr 2022 09:05:53 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://eebond.github.io/centos7-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2shadowsocks/</guid>
    <description><![CDATA[<h2 id="前言">前言</h2>
<blockquote>
<p>之前安装的shadowsocks-libev有点不太好用了，端口直接被封，可能是加密协议的问题。
现在，用网上通用的脚本方法安装shadowsocks。</p>
</blockquote>
<h2 id="安装">安装</h2>
<p><a href="https://github.com/teddysun/shadowsocks_install" target="_blank" rel="noopener noreffer">秋水逸冰的一键安装脚本</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget –no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh <span class="o">&amp;&amp;</span> bash ./shadowsocks.sh  
</span></span></code></pre></td></tr></table>
</div>
</div><p>直接默认配置就行，后期手动更改配置。</p>
<h2 id="修改配置文件">修改配置文件</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim /etc/shadowsocks.json
</span></span></code></pre></td></tr></table>
</div>
</div><p>只需要修改服务端口和密码就行了，其他的不懂就不要动。</p>
<p>退出编辑页面，重启shadowsocks</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">systemctl restart shadowsocks
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="客户端下载使用">客户端下载使用</h2>
<p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener noreffer">shadowsocks-windows客户端直链</a></p>
]]></description>
</item><item>
    <title>Cloudreve网盘备份与迁移</title>
    <link>https://eebond.github.io/cloudreve%E7%BD%91%E7%9B%98%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%BF%81%E7%A7%BB/</link>
    <pubDate>Fri, 01 Apr 2022 15:37:56 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://eebond.github.io/cloudreve%E7%BD%91%E7%9B%98%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%BF%81%E7%A7%BB/</guid>
    <description><![CDATA[<h2 id="备份">备份</h2>
<p>Cloudreve网盘使用内置数据库，实际所有的数据都保存在uploads目录里，而我的uploads使用软链接指向我的阿里云盘中的uploads目录，所以我实际只需要备份如下文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">  cloudreve
</span></span><span class="line"><span class="cl">  cloudreve.db
</span></span><span class="line"><span class="cl">  conf.ini
</span></span></code></pre></td></tr></table>
</div>
</div><p>实际只需要在Cloudreve目录创建git仓库，将上述文件推送到GitHub仓库即可，具体操作不详细叙述。</p>
<h2 id="迁移">迁移</h2>
<p>之前已经备份过了，所以当要在新服务器上重新搭建cloudreve，只需要pull上述仓库分支。</p>
<p>我的具体操作如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git pull git@github.com:eebond/banwagong.git master
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后按照官方教程安装配置<a href="https://docs.cloudreve.org/getting-started/install" target="_blank" rel="noopener noreffer">https://docs.cloudreve.org/getting-started/install</a></p>
]]></description>
</item><item>
    <title>vscode&#43;PicGo插件配置实现自动上传图片</title>
    <link>https://eebond.github.io/vscode-picgo%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</link>
    <pubDate>Thu, 31 Mar 2022 20:13:31 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://eebond.github.io/vscode-picgo%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</guid>
    <description><![CDATA[<h2 id="前言">前言</h2>
<p>由于我喜欢在VSCode上写博客，也一直使用PicGo客户端来上传图片到图床，但是由于经常在Ubuntu与windows系统中切换，而PicGo对于Liunx的支持不太好（无法实现开机自启动功能），所以想着使用PicGo的vscode插件，那么以后只需要一个VSCode，就可以不需要PicGo客户端了。而且VSCode还可以在不同设备间进行同步。</p>
<h2 id="实现">实现</h2>
<h3 id="安装picgo插件">安装PicGo插件</h3>
<p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220331202347.png" title=" " data-thumbnail="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220331202347.png" data-sub-html="<h2> </h2><p> </p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<h3 id="配置picgo插件">配置PicGo插件</h3>
<p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220331202539.png" title=" " data-thumbnail="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220331202539.png" data-sub-html="<h2> </h2><p> </p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220331203130.png" title=" " data-thumbnail="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220331203130.png" data-sub-html="<h2> </h2><p> </p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220331205910.png" title=" " data-thumbnail="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220331205910.png" data-sub-html="<h2> </h2><p> </p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<h3 id="使用的快捷键">使用的快捷键</h3>
<p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220331203252.png" title=" " data-thumbnail="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220331203252.png" data-sub-html="<h2> </h2><p> </p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<p>至此，就可以在VSCode中快乐的使用图床了。</p>
<blockquote>
<p>tips:
不过VSCode的插件PicGo来上传图片确实稍微比客户端慢一点。</p>
</blockquote>
]]></description>
</item><item>
    <title>Ubuntu中安装PicGo并配置GitHub图床</title>
    <link>https://eebond.github.io/ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85picgo%E5%B9%B6%E9%85%8D%E7%BD%AEgithub%E5%9B%BE%E5%BA%8A/</link>
    <pubDate>Thu, 31 Mar 2022 13:53:13 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://eebond.github.io/ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85picgo%E5%B9%B6%E9%85%8D%E7%BD%AEgithub%E5%9B%BE%E5%BA%8A/</guid>
    <description><![CDATA[<p>PicGo在windows中安装较为简单，本文详细说明PicGo在Ubuntu中的安装配置过程，Windows端可以参考。</p>
<h3 id="下载picgo软件包">下载PicGo软件包</h3>
<p>项目地址：<a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener noreffer">PicGo</a></p>
<p>Ubuntu端需要下载后缀为.AppImage的软件包。</p>
<p>本文所下软件包为<a href="https://github.com/Molunerfinn/PicGo/releases/download/v2.3.0/PicGo-2.3.0.AppImage" target="_blank" rel="noopener noreffer">PicGo-2.3.0.AppImage</a></p>
<h3 id="安装运行软件包">安装运行软件包</h3>
<p>给PicGo-2.3.0.AppImage权限：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">chmod <span class="m">777</span> PicGo-2.3.0.AppImage
</span></span></code></pre></td></tr></table>
</div>
</div><p>右键单击，选择run，运行PicGo。</p>
<h3 id="配置picgo和github图床">配置PicGo和GitHub图床</h3>
<p>事先准备在GitHub新建一个仓库，用来存放图片，并且添加Token。</p>
<p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220331205442.png" title=" " data-thumbnail="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220331205442.png" data-sub-html="<h2> </h2><p> </p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<p>其中自定义域名为</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">https://raw.githubusercontent.com/eebondhttps://fastly.jsdelivr.net/gh/eebond/images/main
</span></span></code></pre></td></tr></table>
</div>
</div><p>还可以对图片链接进行CDN加速，需要改变自定义域名为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">https://fastly.jsdelivr.net/gh/用户名/图床仓库名
</span></span></code></pre></td></tr></table>
</div>
</div><p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220331185426.png" title=" " data-thumbnail="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220331185426.png" data-sub-html="<h2> </h2><p> </p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<p>指定存储路径是在仓库中创建的一个文件夹。</p>
<p>快捷键设置：

<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220331141114.png" title=" " data-thumbnail="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220331141114.png" data-sub-html="<h2> </h2><p> </p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<h3 id="安装必要支撑软件">安装必要支撑软件</h3>
<p>之前的操作后，PicGo无法正常使用快捷键，缺失支撑软件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt install xclip
</span></span></code></pre></td></tr></table>
</div>
</div><p>至此，我们可以正常使用图床了。</p>
]]></description>
</item><item>
    <title>Hexo博客GitHub Actions自动部署</title>
    <link>https://eebond.github.io/hexo%E5%8D%9A%E5%AE%A2github-actions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</link>
    <pubDate>Wed, 30 Mar 2022 19:14:28 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://eebond.github.io/hexo%E5%8D%9A%E5%AE%A2github-actions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</guid>
    <description><![CDATA[<h2 id="问题分析">问题分析</h2>
<p>本地Hexo博客源码备份到GitHub的一个仓库中，博客展示有两个地方，一个是GitHub Pages，一个是自己VPS建的博客网站。每次先将本地源码备份推送到GitHub仓库，然后再deploy出网站内容发布到两个服务端。通过GitHub的Actions，可以让我只需要每次推送源码，GitHub帮我自动部署网站。<strong>甚至本地都不需要安装Hexo</strong>。</p>
<h2 id="实现方案">实现方案</h2>
<p>blog_backup仓库用于存放Hexo博客源码，eebond.github.io仓库存放博客网站文件，vps自建git私服存放博客网站文件。</p>
<p>需要一对公私钥，私钥放在blog_backup仓库，公钥放在eebond.github.io仓库和vps私服仓库所在用户。</p>
<h3 id="生成公钥私钥">生成公钥私钥</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ssh-keygen -f hexo-deploy-key -t rsa
</span></span></code></pre></td></tr></table>
</div>
</div><p>命令执行后会生成两个文件hexo-deploy-key（私钥）和hexo-deploy-key.pub（公钥）。</p>
<h3 id="添加公钥">添加公钥</h3>
<h4 id="添加公钥到github-pages仓库中eebondgithubio">添加公钥到GitHub Pages仓库中（eebond.github.io)</h4>
<p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220331135108.png" title=" " data-thumbnail="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220331135108.png" data-sub-html="<h2> </h2><p> </p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<h4 id="添加公钥到私服仓库所在用户">添加公钥到私服仓库所在用户</h4>
<p>我的私服是在git用户中创建的，所以添加到git用户下的.ssh/authorized_keys文件中。</p>
<h3 id="添加私钥">添加私钥</h3>
<p>将私钥添加到blog_backup仓库的Actions secrets：

<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220331142405.png" title=" " data-thumbnail="https://fastly.jsdelivr.net/gh/eebond/images/Markdown/20220331142405.png" data-sub-html="<h2> </h2><p> </p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<h3 id="配置workflow文件">配置workflow文件</h3>
<p>在blog_backup仓库根目录下创建.github/workflows/autodeploy.yml文件，文件名随意设置。
文件内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 当有改动推送到main分支时，启动Action</span>
</span></span><span class="line"><span class="cl">name: 自动部署
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">on:
</span></span><span class="line"><span class="cl">  push:
</span></span><span class="line"><span class="cl">    branches:
</span></span><span class="line"><span class="cl">      - master <span class="c1">#2020年10月后github新建仓库默认分支改为main，注意更改</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  release:
</span></span><span class="line"><span class="cl">    types:
</span></span><span class="line"><span class="cl">      - published
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">jobs:
</span></span><span class="line"><span class="cl">  deploy:
</span></span><span class="line"><span class="cl">    runs-on: ubuntu-latest
</span></span><span class="line"><span class="cl">    steps:
</span></span><span class="line"><span class="cl">      - name: 检查分支
</span></span><span class="line"><span class="cl">        uses: actions/checkout@v2
</span></span><span class="line"><span class="cl">        with:
</span></span><span class="line"><span class="cl">          ref: master <span class="c1">#2020年10月后github新建仓库默认分支改为main，注意更改</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      - name: 安装 Node
</span></span><span class="line"><span class="cl">        uses: actions/setup-node@v1
</span></span><span class="line"><span class="cl">        with:
</span></span><span class="line"><span class="cl">          node-version: <span class="s1">&#39;12.x&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      - name: 安装 Hexo
</span></span><span class="line"><span class="cl">        run: <span class="p">|</span>
</span></span><span class="line"><span class="cl">          <span class="nb">export</span> <span class="nv">TZ</span><span class="o">=</span><span class="s1">&#39;Asia/Shanghai&#39;</span>
</span></span><span class="line"><span class="cl">          npm install hexo-cli -g
</span></span><span class="line"><span class="cl">      - name: 缓存 Hexo
</span></span><span class="line"><span class="cl">        uses: actions/cache@v1
</span></span><span class="line"><span class="cl">        id: cache
</span></span><span class="line"><span class="cl">        with:
</span></span><span class="line"><span class="cl">          path: node_modules
</span></span><span class="line"><span class="cl">          key: <span class="si">${</span><span class="p">{runner.OS</span><span class="si">}</span><span class="o">}</span>-<span class="si">${</span><span class="p">{hashFiles(</span><span class="s1">&#39;**/package-lock.json&#39;</span><span class="p">)</span><span class="si">}</span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      - name: 安装依赖
</span></span><span class="line"><span class="cl">        <span class="k">if</span>: steps.cache.outputs.cache-hit !<span class="o">=</span> <span class="s1">&#39;true&#39;</span>
</span></span><span class="line"><span class="cl">        run: <span class="p">|</span>
</span></span><span class="line"><span class="cl">          npm install --save
</span></span><span class="line"><span class="cl">      - name: 生成静态文件
</span></span><span class="line"><span class="cl">        run: <span class="p">|</span>
</span></span><span class="line"><span class="cl">          hexo clean
</span></span><span class="line"><span class="cl">          hexo generate
</span></span><span class="line"><span class="cl">      - name: 服务器验证
</span></span><span class="line"><span class="cl">        env:
</span></span><span class="line"><span class="cl">          ACTION_DEPLOY_KEY: <span class="si">${</span><span class="p">{ secrets.HEXO_DEPLOY_KEY </span><span class="si">}</span><span class="o">}</span>
</span></span><span class="line"><span class="cl">        run: <span class="p">|</span>
</span></span><span class="line"><span class="cl">          sudo timedatectl set-timezone <span class="s2">&#34;Asia/Shanghai&#34;</span>
</span></span><span class="line"><span class="cl">          mkdir -p ~/.ssh/
</span></span><span class="line"><span class="cl">          <span class="nb">echo</span> <span class="s2">&#34;</span><span class="nv">$ACTION_DEPLOY_KEY</span><span class="s2">&#34;</span> &gt; ~/.ssh/id_rsa
</span></span><span class="line"><span class="cl">          chmod <span class="m">600</span> ~/.ssh/id_rsa
</span></span><span class="line"><span class="cl">          ssh-keyscan -p <span class="m">29488</span> 23.105.219.155 &gt;&gt; ~/.ssh/known_hosts  <span class="c1">#此处填写你的服务器IP</span>
</span></span><span class="line"><span class="cl">          git config --global user.name <span class="s2">&#34;eebond&#34;</span>
</span></span><span class="line"><span class="cl">          git config --global user.email <span class="s2">&#34;1422797591@qq.com&#34;</span> <span class="c1">#修改为你的GitHub用户名邮箱</span>
</span></span><span class="line"><span class="cl">      - name: 部署
</span></span><span class="line"><span class="cl">        run: <span class="p">|</span>
</span></span><span class="line"><span class="cl">          hexo deploy
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后就可以本地推送后，GitHub自动部署网站了。</p>
]]></description>
</item></channel>
</rss>

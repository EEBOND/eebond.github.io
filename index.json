[{"categories":["经验积累"],"content":"注册搬瓦工账号 搬瓦工官网 进入搬瓦工官网，如下图所示。 \r \" \r 点击官网右上角的Register按钮，进入注册页面，如图所示。 \r \" \r 填写相关信息，注意手机号码要11位，密码要显示绿色Strong，反面教材如图所示。 \r \" \r 点击提交后进入邮箱验证界面，查看注册邮箱的邮件，填写验证码 \r \" \r 验证成功之后进入用户服务主界面 \r \" \r ","date":"2022-05-16","objectID":"/%E5%A6%82%E4%BD%95%E6%B3%A8%E5%86%8C%E8%B4%AD%E4%B9%B0%E6%90%AC%E7%93%A6%E5%B7%A5vps/:1:0","tags":["搬瓦工"],"title":"如何注册购买搬瓦工VPS","uri":"/%E5%A6%82%E4%BD%95%E6%B3%A8%E5%86%8C%E8%B4%AD%E4%B9%B0%E6%90%AC%E7%93%A6%E5%B7%A5vps/"},{"categories":["经验积累"],"content":"选购搬瓦工VPS 点击Order New Services选项，如果所示。 \r \" \r 进入All VPS services界面，里面展示了所有搬瓦工cn2线路的机器。这里我们本着最便宜的原则选择最便宜的$49.99套餐点击Order Now,其实用的还行，晚高峰不稳定。 \r \" \r 如图所示，点击Add to Cart，添加到购物车。 \r \" \r 购物车界面如果所示，填写优惠码BWH3HYATVBJW，点击Validate Code按钮验证优惠码，之后点击checkout按钮。 \r \" \r 进入支付选择界面，选用支付宝支付，即选择Alipay选项，点击提交，如图所示。 \r \" \r 确认支付界面如图所示，点击Make payment按钮。 \r \" \r \r \" \r 之后完成支付即可。 ","date":"2022-05-16","objectID":"/%E5%A6%82%E4%BD%95%E6%B3%A8%E5%86%8C%E8%B4%AD%E4%B9%B0%E6%90%AC%E7%93%A6%E5%B7%A5vps/:2:0","tags":["搬瓦工"],"title":"如何注册购买搬瓦工VPS","uri":"/%E5%A6%82%E4%BD%95%E6%B3%A8%E5%86%8C%E8%B4%AD%E4%B9%B0%E6%90%AC%E7%93%A6%E5%B7%A5vps/"},{"categories":["Linux"],"content":"前言 本文主要讲述实现从一台Linux服务器实现对另一台Linux服务器的 免密登录，还有在linux上生成ssh key密钥的方法。 ","date":"2022-05-15","objectID":"/linux%E5%AE%9E%E7%8E%B0%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E4%BB%A5%E5%8F%8A%E5%AF%86%E9%92%A5%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/:1:0","tags":["ssh"],"title":"Linux实现免密登录以及密钥生成方法","uri":"/linux%E5%AE%9E%E7%8E%B0%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E4%BB%A5%E5%8F%8A%E5%AF%86%E9%92%A5%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/"},{"categories":["Linux"],"content":"生成SSH KEY密钥文件 ssh-keygen -t rsa 用户家目录中的.ssh目录下出现如下文件： authorized_keys #认证用户的公钥，认证用户可以免密登录当前账户 id_rsa #当前用户的密钥 id_rsa.pub #当前用户的公钥 ","date":"2022-05-15","objectID":"/linux%E5%AE%9E%E7%8E%B0%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E4%BB%A5%E5%8F%8A%E5%AF%86%E9%92%A5%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/:2:0","tags":["ssh"],"title":"Linux实现免密登录以及密钥生成方法","uri":"/linux%E5%AE%9E%E7%8E%B0%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E4%BB%A5%E5%8F%8A%E5%AF%86%E9%92%A5%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/"},{"categories":["Linux"],"content":"设置免密登录 其实免密登录的原理就是把当前用户的公钥放到被登录用户的authorized_keys文件中去。 ssh-copy-id root@144.34.163.167 -p 29488 期间需要输入被登录用户的密码才能将当前用户的公钥放入被登录用户的authorized_keys文件中去。 还有个办法就是复制当前用户的公钥直接粘贴到被登录用户的authorized_keys文件中去。 如果被登录的Linux的端口不是默认的22端口，则要用 -p 选项来指定登录端口。 ","date":"2022-05-15","objectID":"/linux%E5%AE%9E%E7%8E%B0%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E4%BB%A5%E5%8F%8A%E5%AF%86%E9%92%A5%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/:3:0","tags":["ssh"],"title":"Linux实现免密登录以及密钥生成方法","uri":"/linux%E5%AE%9E%E7%8E%B0%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E4%BB%A5%E5%8F%8A%E5%AF%86%E9%92%A5%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/"},{"categories":["Linux"],"content":"尝试免密登录 ssh root@144.34.163.167 -p 29488 成功免密登录！ ","date":"2022-05-15","objectID":"/linux%E5%AE%9E%E7%8E%B0%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E4%BB%A5%E5%8F%8A%E5%AF%86%E9%92%A5%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/:4:0","tags":["ssh"],"title":"Linux实现免密登录以及密钥生成方法","uri":"/linux%E5%AE%9E%E7%8E%B0%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E4%BB%A5%E5%8F%8A%E5%AF%86%E9%92%A5%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/"},{"categories":["Linux","Centos7","Java"],"content":"前言 学习JAVA需要安装配置jdk环境，太多数时候会在Linux环境中配置jdk，本篇以Centos7为例配置jdk8，以便日后参考，快速配置环境。 ","date":"2022-04-17","objectID":"/linux%E4%B8%AD%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEjdk8/:1:0","tags":["JDK"],"title":"Linux中安装配置JDK8","uri":"/linux%E4%B8%AD%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEjdk8/"},{"categories":["Linux","Centos7","Java"],"content":"安装配置 ","date":"2022-04-17","objectID":"/linux%E4%B8%AD%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEjdk8/:2:0","tags":["JDK"],"title":"Linux中安装配置JDK8","uri":"/linux%E4%B8%AD%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEjdk8/"},{"categories":["Linux","Centos7","Java"],"content":"下载jdk8 1.通过oracle官网下载 \r \" \r 但是官网下载，需要Oracle账号。网上找到得账号： 1287019365@qq.com Oracle@1234 2.通过wget下载我的私有云盘里的jdk8备份 wget jdk-8u321-linux-x64.tar.gz https://cloud.eebond.xyz/api/v3/file/get/194/jdk-8u321-linux-x64.tar.gz?sign=bvDVYkfqvYU4jv86no9qpC6Sw7n2opQLA6CtcU_W-EI%3D%3A0 ","date":"2022-04-17","objectID":"/linux%E4%B8%AD%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEjdk8/:2:1","tags":["JDK"],"title":"Linux中安装配置JDK8","uri":"/linux%E4%B8%AD%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEjdk8/"},{"categories":["Linux","Centos7","Java"],"content":"配置 1、 解压jdk-8u321-linux-x64.tar.gz到指定目录 mkdir /usr/java \u0026\u0026 tar -zxvf jdk-8u321-linux-x64.tar.gz -C /usr/java/ 2、 配置环境变量 打开配置文件 vim /etc/profile 编写配置文件内容 export JAVA_HOME=/usr/java/jdk1.8.0_321 export PATH=$JAVA_HOME/bin:$PATH export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar 使更新后的配置文件生效 source /etc/profile ","date":"2022-04-17","objectID":"/linux%E4%B8%AD%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEjdk8/:2:2","tags":["JDK"],"title":"Linux中安装配置JDK8","uri":"/linux%E4%B8%AD%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEjdk8/"},{"categories":["Linux","Centos7","Java"],"content":"验证使用jdk java -version javac \r \" \r ","date":"2022-04-17","objectID":"/linux%E4%B8%AD%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEjdk8/:2:3","tags":["JDK"],"title":"Linux中安装配置JDK8","uri":"/linux%E4%B8%AD%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEjdk8/"},{"categories":["科学上网"],"content":"前言 Trojan-goTrojan-Go是使用Go语言实现的完整的Trojan代理，和Trojan协议以及原版的配置文件格式兼容。支持并且兼容Trojan-GFW版本的绝大多数功能，并扩展了更多的实用功能。 Trojan-Go的的首要目标是保障传输安全性和隐蔽性。在此前提下，尽可能提升传输性能和易用性。 Trojan-Go官方文档,可以详细阅读，了解trojan的原理。 Trojan-Go和V2ray + WS + TLS一样是目前比较稳定的科学上网方式，shadowsocks已经能被墙识别，搬瓦工秒被封端口。 ","date":"2022-04-07","objectID":"/centos7%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2trojan-go/:1:0","tags":["trojan-go"],"title":"CentOS7安装部署Trojan-go","uri":"/centos7%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2trojan-go/"},{"categories":["科学上网"],"content":"安装Trojan-Go ","date":"2022-04-07","objectID":"/centos7%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2trojan-go/:2:0","tags":["trojan-go"],"title":"CentOS7安装部署Trojan-go","uri":"/centos7%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2trojan-go/"},{"categories":["科学上网"],"content":"申请TLS证书 certbot certonly --standalone -d trojan.eebond.xyz 如果当前有nginx正在运行，先关闭nginx。 查看证书是否安装成功 certbot certificates 证书安装路径 Certificate Path: /etc/letsencrypt/live/trojan.eebond.xyz/fullchain.pem Private Key Path: /etc/letsencrypt/live/trojan.eebond.xyz/privkey.pem ","date":"2022-04-07","objectID":"/centos7%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2trojan-go/:2:1","tags":["trojan-go"],"title":"CentOS7安装部署Trojan-go","uri":"/centos7%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2trojan-go/"},{"categories":["科学上网"],"content":"安装配置Nginx yum install nginx -y 网站配置文件 vim /etc/nginx/conf.d/trojan.conf 文件内容 server { listen 1239; root /srv/www/blog; } server { listen 1001; root /srv/www/blog; } ","date":"2022-04-07","objectID":"/centos7%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2trojan-go/:2:2","tags":["trojan-go"],"title":"CentOS7安装部署Trojan-go","uri":"/centos7%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2trojan-go/"},{"categories":["科学上网"],"content":"安装配置trojan-go 下载安装trojan-go 在 https://github.com/p4gefau1t/trojan-go/releases 查看下载链接，下载解压至 /usr/local/trojan-go目录 wget https://github.com/p4gefau1t/trojan-go/releases/download/v0.10.6/trojan-go-linux-amd64.zip 配置trojan-go 将example目录下的 server.json 复制到/usr/local/trojan-go目录，修改为如下内容 { \"run_type\": \"server\", \"local_addr\": \"0.0.0.0\", \"local_port\": 447, \"remote_addr\": \"127.0.0.1\", \"remote_port\": 1001, \"password\": [ \"5f45307f-a867-05de-3913-ff539f92325f\" ], \"ssl\": { \"verify\": true, \"verify_hostname\": true, \"cert\": \"/etc/letsencrypt/live/trojan.eebond.xyz/fullchain.pem\", \"key\": \"/etc/letsencrypt/live/trojan.eebond.xyz/privkey.pem\", \"sni\": \"trojan.eebond.xyz\", \"fallback_addr\": \"127.0.0.1\", \"fallback_port\": 1239 }, \"router\": { \"enabled\": true, \"block\": [ \"geoip:private\" ], \"geoip\": \"/usr/local/trojan-go/geoip.dat\", \"geosite\": \"/usr/local/trojan-go/geosite.dat\" } } 创建systemctl启动文件 1.复制启动文件至系统服务目录 cp /usr/local/trojan-go/example/trojan-go.service /usr/lib/systemd/system/ 2.修改启动文件， [Unit] Description=Trojan-Go - An unidentifiable mechanism that helps you bypass GFW Documentation=https://p4gefau1t.github.io/trojan-go/ After=network.target nss-lookup.target [Service] User=root CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE NoNewPrivileges=true ExecStart=/usr/local/trojan-go/trojan-go -config /usr/local/trojan-go/server.json Restart=on-failure RestartSec=10s LimitNOFILE=infinity [Install] WantedBy=multi-user.target 注意修改User和ExecStart，否则无法自启动 3.启动服务\u0026设置开机启动 systemctl daemon-reload systemctl start trojan-go systemctl enable trojan-go 之后就可以在客户端快乐的使用了！ ","date":"2022-04-07","objectID":"/centos7%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2trojan-go/:2:3","tags":["trojan-go"],"title":"CentOS7安装部署Trojan-go","uri":"/centos7%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2trojan-go/"},{"categories":["科学上网"],"content":"前言 之前安装的shadowsocks-libev有点不太好用了，端口直接被封，可能是加密协议的问题。 现在，用网上通用的脚本方法安装shadowsocks。 ","date":"2022-04-07","objectID":"/centos7-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2shadowsocks/:1:0","tags":["shadowsocks"],"title":"CentOS7 安装部署Shadowsocks","uri":"/centos7-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2shadowsocks/"},{"categories":["科学上网"],"content":"安装 秋水逸冰的一键安装脚本 wget –no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh \u0026\u0026 bash ./shadowsocks.sh 直接默认配置就行，后期手动更改配置。 ","date":"2022-04-07","objectID":"/centos7-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2shadowsocks/:2:0","tags":["shadowsocks"],"title":"CentOS7 安装部署Shadowsocks","uri":"/centos7-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2shadowsocks/"},{"categories":["科学上网"],"content":"修改配置文件 vim /etc/shadowsocks.json 只需要修改服务端口和密码就行了，其他的不懂就不要动。 退出编辑页面，重启shadowsocks systemctl restart shadowsocks ","date":"2022-04-07","objectID":"/centos7-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2shadowsocks/:3:0","tags":["shadowsocks"],"title":"CentOS7 安装部署Shadowsocks","uri":"/centos7-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2shadowsocks/"},{"categories":["科学上网"],"content":"客户端下载使用 shadowsocks-windows客户端直链 ","date":"2022-04-07","objectID":"/centos7-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2shadowsocks/:4:0","tags":["shadowsocks"],"title":"CentOS7 安装部署Shadowsocks","uri":"/centos7-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2shadowsocks/"},{"categories":["Cloudreve"],"content":"备份 Cloudreve网盘使用内置数据库，实际所有的数据都保存在uploads目录里，而我的uploads使用软链接指向我的阿里云盘中的uploads目录，所以我实际只需要备份如下文件： cloudreve cloudreve.db conf.ini 实际只需要在Cloudreve目录创建git仓库，将上述文件推送到GitHub仓库即可，具体操作不详细叙述。 ","date":"2022-04-01","objectID":"/cloudreve%E7%BD%91%E7%9B%98%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%BF%81%E7%A7%BB/:1:0","tags":["Cloudreve"],"title":"Cloudreve网盘备份与迁移","uri":"/cloudreve%E7%BD%91%E7%9B%98%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%BF%81%E7%A7%BB/"},{"categories":["Cloudreve"],"content":"迁移 之前已经备份过了，所以当要在新服务器上重新搭建cloudreve，只需要pull上述仓库分支。 我的具体操作如下： git pull git@github.com:eebond/banwagong.git master 之后按照官方教程安装配置https://docs.cloudreve.org/getting-started/install ","date":"2022-04-01","objectID":"/cloudreve%E7%BD%91%E7%9B%98%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%BF%81%E7%A7%BB/:2:0","tags":["Cloudreve"],"title":"Cloudreve网盘备份与迁移","uri":"/cloudreve%E7%BD%91%E7%9B%98%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%BF%81%E7%A7%BB/"},{"categories":["软件安装"],"content":"前言 由于我喜欢在VSCode上写博客，也一直使用PicGo客户端来上传图片到图床，但是由于经常在Ubuntu与windows系统中切换，而PicGo对于Liunx的支持不太好（无法实现开机自启动功能），所以想着使用PicGo的vscode插件，那么以后只需要一个VSCode，就可以不需要PicGo客户端了。而且VSCode还可以在不同设备间进行同步。 ","date":"2022-03-31","objectID":"/vscode-picgo%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/:1:0","tags":["PicGo","VSCode"],"title":"vscode+PicGo插件配置实现自动上传图片","uri":"/vscode-picgo%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"},{"categories":["软件安装"],"content":"实现 ","date":"2022-03-31","objectID":"/vscode-picgo%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/:2:0","tags":["PicGo","VSCode"],"title":"vscode+PicGo插件配置实现自动上传图片","uri":"/vscode-picgo%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"},{"categories":["软件安装"],"content":"安装PicGo插件 \r \" \r ","date":"2022-03-31","objectID":"/vscode-picgo%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/:2:1","tags":["PicGo","VSCode"],"title":"vscode+PicGo插件配置实现自动上传图片","uri":"/vscode-picgo%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"},{"categories":["软件安装"],"content":"配置PicGo插件 \r \" \r \r \" \r \r \" \r ","date":"2022-03-31","objectID":"/vscode-picgo%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/:2:2","tags":["PicGo","VSCode"],"title":"vscode+PicGo插件配置实现自动上传图片","uri":"/vscode-picgo%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"},{"categories":["软件安装"],"content":"使用的快捷键 \r \" \r 至此，就可以在VSCode中快乐的使用图床了。 tips: 不过VSCode的插件PicGo来上传图片确实稍微比客户端慢一点。 ","date":"2022-03-31","objectID":"/vscode-picgo%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/:2:3","tags":["PicGo","VSCode"],"title":"vscode+PicGo插件配置实现自动上传图片","uri":"/vscode-picgo%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"},{"categories":["软件安装"],"content":"PicGo在windows中安装较为简单，本文详细说明PicGo在Ubuntu中的安装配置过程，Windows端可以参考。 ","date":"2022-03-31","objectID":"/ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85picgo%E5%B9%B6%E9%85%8D%E7%BD%AEgithub%E5%9B%BE%E5%BA%8A/:0:0","tags":["PicGo","Ubuntu"],"title":"Ubuntu中安装PicGo并配置GitHub图床","uri":"/ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85picgo%E5%B9%B6%E9%85%8D%E7%BD%AEgithub%E5%9B%BE%E5%BA%8A/"},{"categories":["软件安装"],"content":"下载PicGo软件包 项目地址：PicGo Ubuntu端需要下载后缀为.AppImage的软件包。 本文所下软件包为PicGo-2.3.0.AppImage ","date":"2022-03-31","objectID":"/ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85picgo%E5%B9%B6%E9%85%8D%E7%BD%AEgithub%E5%9B%BE%E5%BA%8A/:0:1","tags":["PicGo","Ubuntu"],"title":"Ubuntu中安装PicGo并配置GitHub图床","uri":"/ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85picgo%E5%B9%B6%E9%85%8D%E7%BD%AEgithub%E5%9B%BE%E5%BA%8A/"},{"categories":["软件安装"],"content":"安装运行软件包 给PicGo-2.3.0.AppImage权限： chmod 777 PicGo-2.3.0.AppImage 右键单击，选择run，运行PicGo。 ","date":"2022-03-31","objectID":"/ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85picgo%E5%B9%B6%E9%85%8D%E7%BD%AEgithub%E5%9B%BE%E5%BA%8A/:0:2","tags":["PicGo","Ubuntu"],"title":"Ubuntu中安装PicGo并配置GitHub图床","uri":"/ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85picgo%E5%B9%B6%E9%85%8D%E7%BD%AEgithub%E5%9B%BE%E5%BA%8A/"},{"categories":["软件安装"],"content":"配置PicGo和GitHub图床 事先准备在GitHub新建一个仓库，用来存放图片，并且添加Token。 \r \" \r 其中自定义域名为 https://raw.githubusercontent.com/eebondhttps://gitee.com/eebond0327/images/raw/main/main 还可以对图片链接进行CDN加速，需要改变自定义域名为： https://cdn.jsdelivr.net/gh/用户名/图床仓库名 \r \" \r 指定存储路径是在仓库中创建的一个文件夹。 快捷键设置： \" \r ","date":"2022-03-31","objectID":"/ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85picgo%E5%B9%B6%E9%85%8D%E7%BD%AEgithub%E5%9B%BE%E5%BA%8A/:0:3","tags":["PicGo","Ubuntu"],"title":"Ubuntu中安装PicGo并配置GitHub图床","uri":"/ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85picgo%E5%B9%B6%E9%85%8D%E7%BD%AEgithub%E5%9B%BE%E5%BA%8A/"},{"categories":["软件安装"],"content":"安装必要支撑软件 之前的操作后，PicGo无法正常使用快捷键，缺失支撑软件。 sudo apt install xclip 至此，我们可以正常使用图床了。 ","date":"2022-03-31","objectID":"/ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85picgo%E5%B9%B6%E9%85%8D%E7%BD%AEgithub%E5%9B%BE%E5%BA%8A/:0:4","tags":["PicGo","Ubuntu"],"title":"Ubuntu中安装PicGo并配置GitHub图床","uri":"/ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85picgo%E5%B9%B6%E9%85%8D%E7%BD%AEgithub%E5%9B%BE%E5%BA%8A/"},{"categories":["Hexo"],"content":"问题分析 本地Hexo博客源码备份到GitHub的一个仓库中，博客展示有两个地方，一个是GitHub Pages，一个是自己VPS建的博客网站。每次先将本地源码备份推送到GitHub仓库，然后再deploy出网站内容发布到两个服务端。通过GitHub的Actions，可以让我只需要每次推送源码，GitHub帮我自动部署网站。甚至本地都不需要安装Hexo。 ","date":"2022-03-30","objectID":"/hexo%E5%8D%9A%E5%AE%A2github-actions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/:1:0","tags":["Hexo"],"title":"Hexo博客GitHub Actions自动部署","uri":"/hexo%E5%8D%9A%E5%AE%A2github-actions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"},{"categories":["Hexo"],"content":"实现方案 blog_backup仓库用于存放Hexo博客源码，eebond.github.io仓库存放博客网站文件，vps自建git私服存放博客网站文件。 需要一对公私钥，私钥放在blog_backup仓库，公钥放在eebond.github.io仓库和vps私服仓库所在用户。 ","date":"2022-03-30","objectID":"/hexo%E5%8D%9A%E5%AE%A2github-actions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/:2:0","tags":["Hexo"],"title":"Hexo博客GitHub Actions自动部署","uri":"/hexo%E5%8D%9A%E5%AE%A2github-actions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"},{"categories":["Hexo"],"content":"生成公钥私钥 ssh-keygen -f hexo-deploy-key -t rsa 命令执行后会生成两个文件hexo-deploy-key（私钥）和hexo-deploy-key.pub（公钥）。 ","date":"2022-03-30","objectID":"/hexo%E5%8D%9A%E5%AE%A2github-actions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/:2:1","tags":["Hexo"],"title":"Hexo博客GitHub Actions自动部署","uri":"/hexo%E5%8D%9A%E5%AE%A2github-actions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"},{"categories":["Hexo"],"content":"添加公钥 添加公钥到GitHub Pages仓库中（eebond.github.io) \r \" \r 添加公钥到私服仓库所在用户 我的私服是在git用户中创建的，所以添加到git用户下的.ssh/authorized_keys文件中。 ","date":"2022-03-30","objectID":"/hexo%E5%8D%9A%E5%AE%A2github-actions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/:2:2","tags":["Hexo"],"title":"Hexo博客GitHub Actions自动部署","uri":"/hexo%E5%8D%9A%E5%AE%A2github-actions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"},{"categories":["Hexo"],"content":"添加私钥 将私钥添加到blog_backup仓库的Actions secrets： \" \r ","date":"2022-03-30","objectID":"/hexo%E5%8D%9A%E5%AE%A2github-actions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/:2:3","tags":["Hexo"],"title":"Hexo博客GitHub Actions自动部署","uri":"/hexo%E5%8D%9A%E5%AE%A2github-actions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"},{"categories":["Hexo"],"content":"配置workflow文件 在blog_backup仓库根目录下创建.github/workflows/autodeploy.yml文件，文件名随意设置。 文件内容： # 当有改动推送到main分支时，启动Action name: 自动部署 on: push: branches: - master #2020年10月后github新建仓库默认分支改为main，注意更改 release: types: - published jobs: deploy: runs-on: ubuntu-latest steps: - name: 检查分支 uses: actions/checkout@v2 with: ref: master #2020年10月后github新建仓库默认分支改为main，注意更改 - name: 安装 Node uses: actions/setup-node@v1 with: node-version: '12.x' - name: 安装 Hexo run: | export TZ='Asia/Shanghai' npm install hexo-cli -g - name: 缓存 Hexo uses: actions/cache@v1 id: cache with: path: node_modules key: ${{runner.OS}}-${{hashFiles('**/package-lock.json')}} - name: 安装依赖 if: steps.cache.outputs.cache-hit != 'true' run: | npm install --save - name: 生成静态文件 run: | hexo clean hexo generate - name: 服务器验证 env: ACTION_DEPLOY_KEY: ${{ secrets.HEXO_DEPLOY_KEY }} run: | sudo timedatectl set-timezone \"Asia/Shanghai\" mkdir -p ~/.ssh/ echo \"$ACTION_DEPLOY_KEY\" \u003e ~/.ssh/id_rsa chmod 600 ~/.ssh/id_rsa ssh-keyscan -p 29488 23.105.219.155 \u003e\u003e ~/.ssh/known_hosts #此处填写你的服务器IP git config --global user.name \"eebond\" git config --global user.email \"1422797591@qq.com\" #修改为你的GitHub用户名邮箱 - name: 部署 run: | hexo deploy 之后就可以本地推送后，GitHub自动部署网站了。 ","date":"2022-03-30","objectID":"/hexo%E5%8D%9A%E5%AE%A2github-actions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/:2:4","tags":["Hexo"],"title":"Hexo博客GitHub Actions自动部署","uri":"/hexo%E5%8D%9A%E5%AE%A2github-actions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"},{"categories":["Linux"],"content":"vps挂载阿里云盘并用aria2实现离线下载 之前用cloudreve搭建了一个私人网盘，性能可以，但是vps的空间太小，无法存储很多文件。该网盘还有离线下载功能，需要用aria2来实现。所以我想把私人网盘的存储放在阿里云盘里，并且通过aria2实现两个网盘的离线下载。 ","date":"2022-03-30","objectID":"/vps%E4%B8%8A%E6%8C%82%E8%BD%BD%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E5%B9%B6%E7%94%A8aria2%E5%AE%9E%E7%8E%B0%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/:1:0","tags":["阿里云盘","aria2"],"title":"vps上挂载阿里云盘并用aria2实现离线下载","uri":"/vps%E4%B8%8A%E6%8C%82%E8%BD%BD%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E5%B9%B6%E7%94%A8aria2%E5%AE%9E%E7%8E%B0%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/"},{"categories":["Linux"],"content":"首先获得阿里云盘 refreshToken 登录阿里云网页版，点击F12 \r \" \r ","date":"2022-03-30","objectID":"/vps%E4%B8%8A%E6%8C%82%E8%BD%BD%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E5%B9%B6%E7%94%A8aria2%E5%AE%9E%E7%8E%B0%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/:1:1","tags":["阿里云盘","aria2"],"title":"vps上挂载阿里云盘并用aria2实现离线下载","uri":"/vps%E4%B8%8A%E6%8C%82%E8%BD%BD%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E5%B9%B6%E7%94%A8aria2%E5%AE%9E%E7%8E%B0%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/"},{"categories":["Linux"],"content":"让阿里云盘实现WebDAV功能 使用开源项目aliyundrive-WebDAV来实现功能。 以CentOS7为例： yum install python3-pip -y pip3 install aliyundrive-WebDAV 升级项目： pip install --upgrade aliyundrive-WebDAV 后台启动命令实现WebDAV功能 nohup aliyundrive-webdav -I -U 用户名 -W 密码 -r 你的token \u0026 ","date":"2022-03-30","objectID":"/vps%E4%B8%8A%E6%8C%82%E8%BD%BD%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E5%B9%B6%E7%94%A8aria2%E5%AE%9E%E7%8E%B0%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/:1:2","tags":["阿里云盘","aria2"],"title":"vps上挂载阿里云盘并用aria2实现离线下载","uri":"/vps%E4%B8%8A%E6%8C%82%E8%BD%BD%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E5%B9%B6%E7%94%A8aria2%E5%AE%9E%E7%8E%B0%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/"},{"categories":["Linux"],"content":"挂载使用阿里云盘 Rclone 是一个用于在多平台进行文件同步的命令行工具，支持多家网盘及文件传输协议。这里主要介绍 Linux 端挂载 WebDAV 的使用方式： 使用官方脚本安装最新 rclone： curl https://rclone.org/install.sh | sudo bash 接下来使用 rclone 挂载 WebDAV，输入后回车，一步一步跟着 rclone 的提示来即可，下方#号后面的内容为步骤翻译注释，不要全部复制粘贴进去了，仔细看提示根据自己的实际情况来修改，输入命令 rclone config 开始配置： [root@eebond ~]# rclone config 2022/03/30 16:46:46 NOTICE: Config file \"/root/.config/rclone/rclone.conf\" not found - using defaults No remotes found, make a new one? n) New remote s) Set configuration password q) Quit config n/s/q\u003e n name\u003e aliyun Option Storage. Type of storage to configure. Choose a number from below, or type in your own value. 1 / 1Fichier \\ (fichier) 2 / Akamai NetStorage \\ (netstorage) 3 / Alias for an existing remote \\ (alias) 4 / Amazon Drive \\ (amazon cloud drive) 5 / Amazon S3 Compliant Storage Providers including AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Lyve Cloud, Minio, RackCorp, SeaweedFS, and Tencent COS \\ (s3) 6 / Backblaze B2 \\ (b2) 7 / Better checksums for other remotes \\ (hasher) 8 / Box \\ (box) 9 / Cache a remote \\ (cache) 10 / Citrix Sharefile \\ (sharefile) 11 / Compress a remote \\ (compress) 12 / Dropbox \\ (dropbox) 13 / Encrypt/Decrypt a remote \\ (crypt) 14 / Enterprise File Fabric \\ (filefabric) 15 / FTP Connection \\ (ftp) 16 / Google Cloud Storage (this is not Google Drive) \\ (google cloud storage) 17 / Google Drive \\ (drive) 18 / Google Photos \\ (google photos) 19 / Hadoop distributed file system \\ (hdfs) 20 / Hubic \\ (hubic) 21 / In memory object storage system. \\ (memory) 22 / Jottacloud \\ (jottacloud) 23 / Koofr, Digi Storage and other Koofr-compatible storage providers \\ (koofr) 24 / Local Disk \\ (local) 25 / Mail.ru Cloud \\ (mailru) 26 / Mega \\ (mega) 27 / Microsoft Azure Blob Storage \\ (azureblob) 28 / Microsoft OneDrive \\ (onedrive) 29 / OpenDrive \\ (opendrive) 30 / OpenStack Swift (Rackspace Cloud Files, Memset Memstore, OVH) \\ (swift) 31 / Pcloud \\ (pcloud) 32 / Put.io \\ (putio) 33 / QingCloud Object Storage \\ (qingstor) 34 / SSH/SFTP Connection \\ (sftp) 35 / Sia Decentralized Cloud \\ (sia) 36 / Storj Decentralized Cloud Storage \\ (storj) 37 / Sugarsync \\ (sugarsync) 38 / Transparently chunk/split large files \\ (chunker) 39 / Union merges the contents of several upstream fs \\ (union) 40 / Uptobox \\ (uptobox) 41 / Webdav \\ (webdav) 42 / Yandex Disk \\ (yandex) 43 / Zoho \\ (zoho) 44 / http Connection \\ (http) 45 / premiumize.me \\ (premiumizeme) 46 / seafile \\ (seafile) Storage\u003e 41 Option url. URL of http host to connect to. E.g. https://example.com. Enter a value. url\u003e http://127.0.0.1:8080 Option vendor. Name of the Webdav site/service/software you are using. Choose a number from below, or type in your own value. Press Enter to leave empty. 1 / Nextcloud \\ (nextcloud) 2 / Owncloud \\ (owncloud) 3 / Sharepoint Online, authenticated by Microsoft account \\ (sharepoint) 4 / Sharepoint with NTLM authentication, usually self-hosted or on-premises \\ (sharepoint-ntlm) 5 / Other site/service or software \\ (other) vendor\u003e 5 Option user. User name. In case NTLM authentication is used, the username should be in the format 'Domain\\User'. Enter a value. Press Enter to leave empty. user\u003e eebond Option pass. Password. Choose an alternative below. Press Enter for the default (n). y) Yes, type in my own password g) Generate random password n) No, leave this optional password blank (default) y/g/n\u003e y Enter the password: password: Confirm the password: password: Option bearer_token. Bearer token instead of user/pass (e.g. a Macaroon). Enter a value. Press Enter to leave empty. bearer_token\u003e Edit advanced config? y) Yes n) No (default) y/n\u003e -------------------- [aliyun] type = webdav url = http://127.0.0.1:8080 vendor = other user = eebond pass = *** ENCRYPTED *** -------------------- y) Yes this is OK (default) e) Edit this remote d) Delete this remote y/e/d\u003e Current remotes: Name Type ==== ==== aliyun webdav e) Edit existing remote n) New remote d) Delete remote r) Rename remote c) Copy remote s) Set configuration pass","date":"2022-03-30","objectID":"/vps%E4%B8%8A%E6%8C%82%E8%BD%BD%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E5%B9%B6%E7%94%A8aria2%E5%AE%9E%E7%8E%B0%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/:1:3","tags":["阿里云盘","aria2"],"title":"vps上挂载阿里云盘并用aria2实现离线下载","uri":"/vps%E4%B8%8A%E6%8C%82%E8%BD%BD%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E5%B9%B6%E7%94%A8aria2%E5%AE%9E%E7%8E%B0%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/"},{"categories":["Linux"],"content":"安装Aria2 下载脚本 wget -N git.io/aria2.sh \u0026\u0026 chmod +x aria2.sh 运行脚本安装 ./aria2.sh 安装成功后修改配置文件 vim /root/.aria2c/aria2.conf # 下载完成后执行的命令 on-download-complete=/root/.aria2c/upload.sh vim /root/.aria2c/script.conf # 网盘名称(RCLONE 配置时填写的 name) drive-name=aliyun 之后在aria2-for-chrome上使用。 ","date":"2022-03-30","objectID":"/vps%E4%B8%8A%E6%8C%82%E8%BD%BD%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E5%B9%B6%E7%94%A8aria2%E5%AE%9E%E7%8E%B0%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/:1:4","tags":["阿里云盘","aria2"],"title":"vps上挂载阿里云盘并用aria2实现离线下载","uri":"/vps%E4%B8%8A%E6%8C%82%E8%BD%BD%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E5%B9%B6%E7%94%A8aria2%E5%AE%9E%E7%8E%B0%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/"},{"categories":["Linux"],"content":"私人云盘将文件存储放在阿里云盘中 ln -s /root/aliyun/uploads/ uploads ","date":"2022-03-30","objectID":"/vps%E4%B8%8A%E6%8C%82%E8%BD%BD%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E5%B9%B6%E7%94%A8aria2%E5%AE%9E%E7%8E%B0%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/:1:5","tags":["阿里云盘","aria2"],"title":"vps上挂载阿里云盘并用aria2实现离线下载","uri":"/vps%E4%B8%8A%E6%8C%82%E8%BD%BD%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E5%B9%B6%E7%94%A8aria2%E5%AE%9E%E7%8E%B0%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/"},{"categories":["Linux"],"content":"wget命令详解 导读： wget是Linux中的一个下载文件的工具，wget是在Linux下开发的开放源代码的软件，作者是Hrvoje Niksic，后来被移植到包括Windows在内的各个平台上。 它用在命令行下。对于Linux用户是必不可少的工具，尤其对于网络管理员，经常要下载一些软件或从远程服务器恢复备份到本地服务器。如果我们使用虚拟主机，处理这样的事务我们只能先从远程服务器下载到我们电脑磁盘，然后再用ftp工具上传到服务器。这样既浪费时间又浪费精力，那不没办法的事。而到了Linux VPS，它则可以直接下载到服务器而不用经过上传这一步。wget工具体积小但功能完善，它支持断点下载功能，同时支持FTP和HTTP下载方式，支持代理服务器和设置起来方便简单。下面我们以实例的形式说明怎么使用wget。 ","date":"2022-03-28","objectID":"/wget%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:1:0","tags":["wget"],"title":"wget命令使用教程","uri":"/wget%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["Linux"],"content":"1.安装wget yum install -y wget 查看帮助手册 [root@network test]# wget --help GNU Wget 1.14，非交互式的网络文件下载工具。 用法： wget [选项]... [URL]... 长选项所必须的参数在使用短选项时也是必须的。 # 1.启动： -V, --version 显示 Wget 的版本信息并退出。 -h, --help 打印此帮助。 -b, --background 启动后转入后台。 -e, --execute=COMMAND 运行一个“.wgetrc”风格的命令。 # 2.日志和输入文件： -o, --output-file=FILE 将日志信息写入 FILE。 -a, --append-output=FILE 将信息添加至 FILE。 -d, --debug 打印大量调试信息。 -q, --quiet 安静模式 (无信息输出)。 -v, --verbose 详尽的输出 (此为默认值)。 -nv, --no-verbose 关闭详尽输出，但不进入安静模式。 --report-speed=TYPE Output bandwidth as TYPE. TYPE can be bits. -i, --input-file=FILE 下载本地或外部 FILE 中的 URLs。 -F, --force-html 把输入文件当成 HTML 文件。 -B, --base=URL 解析与 URL 相关的 HTML 输入文件 (由 -i -F 选项指定)。 --config=FILE Specify config file to use. # 3.下载： -t, --tries=NUMBER 设置重试次数为 NUMBER (0 代表无限制)。 --retry-connrefused 即使拒绝连接也是重试。 -O, --output-document=FILE 将文档写入 FILE。 -nc, --no-clobber skip downloads that would download to existing files (overwriting them). -c, --continue 断点续传下载文件。 --progress=TYPE 选择进度条类型。 -N, --timestamping 只获取比本地文件新的文件。 --no-use-server-timestamps 不用服务器上的时间戳来设置本地文件。 -S, --server-response 打印服务器响应。 --spider 不下载任何文件。 -T, --timeout=SECONDS 将所有超时设为 SECONDS 秒。 --dns-timeout=SECS 设置 DNS 查寻超时为 SECS 秒。 --connect-timeout=SECS 设置连接超时为 SECS 秒。 --read-timeout=SECS 设置读取超时为 SECS 秒。 -w, --wait=SECONDS 等待间隔为 SECONDS 秒。 --waitretry=SECONDS 在获取文件的重试期间等待 1..SECONDS 秒。 --random-wait 获取多个文件时，每次随机等待间隔 0.5*WAIT...1.5*WAIT 秒。 --no-proxy 禁止使用代理。 -Q, --quota=NUMBER 设置获取配额为 NUMBER 字节。 --bind-address=ADDRESS 绑定至本地主机上的 ADDRESS (主机名或是 IP)。 --limit-rate=RATE 限制下载速率为 RATE。 --no-dns-cache 关闭 DNS 查寻缓存。 --restrict-file-names=OS 限定文件名中的字符为 OS 允许的字符。 --ignore-case 匹配文件/目录时忽略大小写。 -4, --inet4-only 仅连接至 IPv4 地址。 -6, --inet6-only 仅连接至 IPv6 地址。 --prefer-family=FAMILY 首先连接至指定协议的地址 FAMILY 为 IPv6，IPv4 或是 none。 --user=USER 将 ftp 和 http 的用户名均设置为 USER。 --password=PASS 将 ftp 和 http 的密码均设置为 PASS。 --ask-password 提示输入密码。 --no-iri 关闭 IRI 支持。 --local-encoding=ENC IRI (国际化资源标识符) 使用 ENC 作为本地编码。 --remote-encoding=ENC 使用 ENC 作为默认远程编码。 --unlink remove file before clobber. # 4.目录： -nd, --no-directories 不创建目录。 -x, --force-directories 强制创建目录。 -nH, --no-host-directories 不要创建主目录。 --protocol-directories 在目录中使用协议名称。 -P, --directory-prefix=PREFIX 以 PREFIX/... 保存文件 --cut-dirs=NUMBER 忽略远程目录中 NUMBER 个目录层。 # 5.HTTP 选项： --http-user=USER 设置 http 用户名为 USER。 --http-password=PASS 设置 http 密码为 PASS。 --no-cache 不在服务器上缓存数据。 --default-page=NAME 改变默认页 (默认页通常是“index.html”)。 -E, --adjust-extension 以合适的扩展名保存 HTML/CSS 文档。 --ignore-length 忽略头部的‘Content-Length’区域。 --header=STRING 在头部插入 STRING。 --max-redirect 每页所允许的最大重定向。 --proxy-user=USER 使用 USER 作为代理用户名。 --proxy-password=PASS 使用 PASS 作为代理密码。 --referer=URL 在 HTTP 请求头包含‘Referer: URL’。 --save-headers 将 HTTP 头保存至文件。 -U, --user-agent=AGENT 标识为 AGENT 而不是 Wget/VERSION。 --no-http-keep-alive 禁用 HTTP keep-alive (永久连接)。 --no-cookies 不使用 cookies。 --load-cookies=FILE 会话开始前从 FILE 中载入 cookies。 --save-cookies=FILE 会话结束后保存 cookies 至 FILE。 --keep-session-cookies 载入并保存会话 (非永久) cookies。 --post-data=STRING 使用 POST 方式；把 STRING 作为数据发送。 --post-file=FILE 使用 POST 方式；发送 FILE 内容。 --content-disposition 当选中本地文件名时 允许 Content-Disposition 头部 (尚在实验)。 --content-on-error output the received content on server errors. --auth-no-challenge 发送不含服务器询问的首次等待 的基本 HTTP 验证信息。 # 6.HTTPS (SSL/TLS) 选项： --secure-protocol=PR choose secure protocol, one of auto, SSLv2, SSLv3, TLSv1, TLSv1_1 and TLSv1_2. --no-check-certificate 不要验证服务器的证书。 --certificate=FILE 客户端证书文件。 --certificate-type=TYPE 客户端证书类型，PEM 或 DER。 --private-key=FILE 私钥文件。 --private-key-type=TYPE 私钥文件类型，PEM 或 DER。 --ca-certificate=FILE 带有一组 CA 认证的文件。 --ca-directory=DIR 保存 CA 认证的哈希列表的目录。 --random-file=FILE 带有生成 SSL PRNG 的随机数据的文件。 --egd-file=FILE 用于命名带有随机数据的 EGD 套接字的文件。 # 7.FTP 选项： --ftp-user=USER 设置 ftp 用户名为 USER。 --ftp-password=PASS 设置 ftp 密码为 PASS。 --no-remove-listing 不要删除‘.listing’文件。 --no-glob 不在 FTP 文件名中使用通配符展开。 --no-passive-ftp 禁用“passive”传输模式。 --preserve-permissions 保留远程文件的权限。 --retr-symlinks 递归目录时，获取链接的文件 (而非目录)。 # 8.WARC options: --warc-file=FILENAME save request/response data","date":"2022-03-28","objectID":"/wget%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:1:1","tags":["wget"],"title":"wget命令使用教程","uri":"/wget%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["Linux"],"content":"2.使用wget下载文件 1)下载单个文件 以下的例子是从网络下载一个文件并保存在当前目录 在下载的过程中会显示进度条，包含（下载完成百分比，已经下载的字节，当前下载速度，剩余下载时间）。 wget http://cn.wordpress.org/wordpress-4.9.4-zh_CN.tar.gz 2）以不同的文件名保存 -O [root@network test]# wget https://cn.wordpress.org/wordpress-4.9.4-zh_CN.tar.gz [root@network test]# ls wordpress-4.9.4-zh_CN.tar.gz 我们可以使用参数-O来指定一个文件名： wget -O wordpress.tar.gz http://cn.wordpress.org/wordpress-4.9.4-zh_CN.tar.gz 3）断点续传 -c # 使用wget -c重新启动下载中断的文件: 对于我们下载大文件时突然由于网络等原因中断非常有帮助，我们可以继续接着下载而不是重新下载一个文件 wget -c https://cn.wordpress.org/wordpress-4.9.4-zh_CN.tar.gz 4）后台下载 -b # 对于下载非常大的文件的时候，我们可以使用参数-b进行后台下载 [root@network test]# wget -b https://cn.wordpress.org/wordpress-4.9.4-zh_CN.tar.gz 继续在后台运行，pid 为 1463。 将把输出写入至 “wget-log”。 # 可以使用以下命令来察看下载进度: [root@network test]# tail -f wget-log 8550K .......... .......... .......... .......... .......... 96% 814K 0s 8600K .......... .......... .......... .......... .......... 97% 9.53M 0s 8650K .......... .......... .......... .......... .......... 98% 86.8M 0s 8700K .......... .......... .......... .......... .......... 98% 145M 0s 8750K .......... .......... .......... .......... .......... 99% 67.4M 0s 8800K .......... .......... .......... .......... .......... 99% 107M 0s 8850K .......... ......... 100% 1.95M=16s 2018-11-10 15:39:07 (564 KB/s) - 已保存 “wordpress-4.9.4-zh_CN.tar.gz.2” [9082696/9082696]) 5）伪装代理名称下载 有些网站能通过根据判断代理名称不是浏览器而拒绝你的下载请求。 不过你可以通过–user-agent参数伪装。 6）测试下载链接 # 进行定时下载，应该在预定时间测试下载链接是否有效。我们可以增加–spider参数进行测试检查: wget --spider URL 1.如果下载链接正确，将会显示 wget –spider URL Spider mode enabled. Check if remote file exists. HTTP request sent, awaiting response… 200 OK Length: unspecified [text/html] Remote file exists and could contain further links, but recursion is disabled — not retrieving. 2.这保证了下载能在预定的时间进行，但当你给错了一个链接，将会显示如下错误 wget –spider url Spider mode enabled. Check if remote file exists. HTTP request sent, awaiting response… 404 Not Found Remote file does not exist — broken link!!! 你可以在以下几种情况下使用spider参数： 1. 定时下载之前进行检查 2. 间隔检测网站是否可用 3. 检查网站页面的死链接 7）增加重试次数 如果网络有问题或下载一个大文件也有可能失败。wget默认重试20次连接下载文件。如果需要，你可以使用–tries增加重试次数。 wget –tries=40 URL 8）下载多个文件 -i 1.首先，保存一份下载链接文件 cat \u003e filelist.txt url1 url2 url3 url4 2.接着使用这个文件和参数-i下载 wget -i filelist.txt 9）镜像网站 –mirror 10）过滤指定格式下载 –reject 下载一个网站，但你不希望下载图片: wget –reject=gif url 11）把下载信息存入日志文件 -o 你不希望下载信息直接显示在终端而是在一个日志文件，可以使用以下命令： wget -o download.log URL 使用wget -O下载并以不同的文件名保存(-O：下载文件到对应目录，并且修改文件名称) wget -O wordpress.zip http:``//www``.minjieren.com``/download``.aspx?``id``=1080 12）其他参数 限制总下载文件大小 -Q 当你想要下载的文件超过5M而退出下载，你可以使用以下命令： wget -Q5m -i filelist.txt 注意：这个参数对单个文件下载不起作用，只能递归下载时才有效。 下载指定格式文件 -r -A 可以在以下情况使用该功能: 1.下载一个网站的所有图片 2.下载一个网站的所有视频 3.下载一个网站的所有PDF文件 wget -r -A.pdf url 使用wget FTP下载 使用wget来完成ftp链接的下载。 使用wget匿名ftp下载 wget ftp-url 使用wget用户名和密码认证的ftp下载 wget --ftp-user=USERNAME --ftp-password=PASSWORD url ","date":"2022-03-28","objectID":"/wget%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:1:2","tags":["wget"],"title":"wget命令使用教程","uri":"/wget%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["Linux"],"content":"curl 命令行工具及参数 curl是一个开源的用于数据传输的命令行工具与库，它使用URL语法格式，支持众多传输协议，包括：HTTP、HTTPS、FTP、FTPS、GOPHER、TFTP、SCP、SFTP、SMB、TELNET、DICT、LDAP、LDAPS、FILE、IMAP、SMTP、POP3、RTSP和RTMP。curl库提供了很多强大的功能，你可以利用它来进行HTTP/HTTPS请求、上传/下载文件等，且支持Cookie、认证、代理、限速等。 ","date":"2022-03-28","objectID":"/curl%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:1:0","tags":["curl"],"title":"curl命令使用教程","uri":"/curl%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["Linux"],"content":"1.curl的基本使用 1.使用curl访问一个网址（最基本用法） 在命令行中输入“curl 网址”即可在命令显示界面显示该网址的内容。这种使用方式通常用来检测一个网址是否能够正常访问，因为Linux服务器最小化安装里没有浏览器，因此这种方式就是实现一种浏览器访问的功能。 2.使用curl下载文件 在命令行中输入“curl -O 一个word网络地址 ”这句命令的意思是将该word下载到本地。在命令行中输入“curl -o 2.jpg 一个1.jpg网络地址”这句话是将1.jpg下载保存到本地，并可以重命名为2.jpg。 .利用curl上传文件 在命令行中输入“curl -T 1.JPG -u 用户名:密码 ftp://FTP地址/img/ ” 这句命令的意思是将1.jpg上传到一个ftp的目录下，当然了使用该句命令需要知道ftp的基本信息如端口用户名密码等。 ","date":"2022-03-28","objectID":"/curl%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:1:1","tags":["curl"],"title":"curl命令使用教程","uri":"/curl%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["Linux"],"content":"2.curl命令的进阶 目录： 1. curl的使用 1.1 URL访问 1.2 表单提交 1.3 其它HTTP请求方法 1.4 文件上传 1.5 HTTPS支持 1.6 添加请求头 1.7 Cookie支持 2. curl语法及选项 ---------------- 1. curl的使用 1.1 URL访问 访问一个网页时，可以使用curl命令后加上要访问的网址： curl itbilu.com \u003chtml\u003e \u003chead\u003e\u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\u003c/head\u003e \u003cbody bgcolor=\"white\"\u003e \u003ccenter\u003e\u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\u003c/center\u003e \u003chr\u003e\u003ccenter\u003enginx/1.6.2\u003c/center\u003e \u003c/body\u003e \u003c/html\u003e 如上所示，我们就看到所访问网址的页面源码。 重定向跟踪 在上面示例中，页面使用了301重定向，这时我们可以添加-L参数来跟踪URL重定向： curl -L itbilu.com 页面保存 如果需要将页面源码保存到本地，可以使用-o参数： curl -o [文件名] itbilu.com 查看头信息 如果需要查看访问页面的可以添加-i或--include参数： curl -i itbilu.com 添加-i参数后，页面响应头会和页面源码（响应体）一块返回。如果只想查看响应头，可以使用-I或--head参数： curl -I itbilu.com HTTP/1.1 301 Moved Permanently Server: nginx/1.6.2 Date: Sun, 25 Jun 2017 02:03:45 GMT Content-Type: text/html Content-Length: 184 Connection: keep-alive Location: https://itbilu.com/ 1.2 表单提交 通过Form表单，可以将Web页面的表单数据提交到服务端。提交表单时，可以使用GET或POST提交方法。 curl同样支持表单数据提交，也可以使用GET或POST提交方法。 GET数据提交 当全用GET表单数据提交时，提交数据会被附加到请求URL的后面。类型如下： curl '//itbilu.com/?keyword=linux\u0026page=3' 使用curl进行GET数据提交时，也可以直接把提交数据添加到URL后面： curl https://itbilu.com/?keyword=linux\u0026page=3 POST数据提交 curl使用POST提交表单数据时，除了-X参数指定请求方法外，还要使用--data参数添加提交数据： curl -X POST --data 'keyword=linux' itbilu.com 1.3 其它HTTP请求方法 目前为止，我们使用GET和POST两种HTTP请求。curl支持所有HTTP请求方法，只要通过-X参数指定即可。 如，使用DELETE请求： curl -X DELETE itbilu.com/examlple.html 使用PUT请求，并指定请求数据： curl -X PUT --data 'keyword=linux' itbilu.com 1.4 文件上传 curl支持文件上传，上传文件时使用-T或--upload-file参数： curl -T ./index.html www.uploadhttp.com/receive.cgi 1.5 HTTPS支持 对于使用了SSL/TLS加密的HTTPS协议，可以使用curl直接访问： curl https://itbilu.com 如果使用的本地ssl证书认证的HTTPS，可以通过-E或--cert参数指定本地证书： curl -E mycert.pem https:/itbilu.com 1.6 添加请求头 有时在进行HTTP请求时，需要自定义请求头。在curl中，可以通过-H或--header参数来指定请求头。多次使用-H或--header参数可指定多个请求头。 如，指定Content-Type及Authorization请求头： curl -H 'Content-Type:application/json' -H 'Authorization: bearer eyJhbGciOiJIUzI1NiJ9' itbilu.com 1.7 Cookie支持 Cookie是一种常用的保持服务端会话信息的方法，crul也支持使用Cookie。 可以通过--cookie参数指定发送请求时的Cookie值，也可以通过-b [文件名]来指定一个存储了Cookie值的本地文件： curl -b stored_cookies_in_file itbilu.com Cookie值可能会被服务器所返回的值所修改，并应用于下次HTTP请求。这时，可以能过-c参数指定存储服务器返回Cookie值的存储文件： $ curl -b cookies.txt -c newcookies.txt itbilu.com 除以上用法外，curl还可以设置用户代理（客户端）信息、使用代理服务器、指定认证用户名／密码等。详见：curl语法及选项 curl --silent -H \"Host: www.test.com\" \"192.168.0.1/xxx/xxx/t.php\" curl \"http://www.test.com/LiveUserCount.ac \" -x 127.0.0.1:1080 ","date":"2022-03-28","objectID":"/curl%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:1:2","tags":["curl"],"title":"curl命令使用教程","uri":"/curl%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["Linux"],"content":"3.curl语法及选项 # curl语法结构如下： =================== curl [options...] \u003curl\u003e 参数选项 curl（7.29.0）所支持的选项（options）参数如下： 在以下选项中，(H) 表示仅适用 HTTP/HTTPS ，(F) 表示仅适用于 FTP --anyauth 选择 \"any\" 认证方法 (H) -a, --append 添加要上传的文件 (F/SFTP) --basic 使用HTTP基础认证（Basic Authentication）(H) --cacert FILE CA 证书，用于每次请求认证 (SSL) --capath DIR CA 证书目录 (SSL) -E, --cert CERT[:PASSWD] 客户端证书文件及密码 (SSL) --cert-type TYPE 证书文件类型 (DER/PEM/ENG) (SSL) --ciphers LIST SSL 秘钥 (SSL) --compressed 请求压缩 (使用 deflate 或 gzip) -K, --config FILE 指定配置文件 --connect-timeout SECONDS 连接超时设置 -C, --continue-at OFFSET 断点续转 -b, --cookie STRING/FILE Cookies字符串或读取Cookies的文件位置 (H) -c, --cookie-jar FILE 操作结束后，要写入 Cookies 的文件位置 (H) --create-dirs 创建必要的本地目录层次结构 --crlf 在上传时将 LF 转写为 CRLF --crlfile FILE 从指定的文件获得PEM格式CRL列表 -d, --data DATA HTTP POST 数据 (H) --data-ascii DATA ASCII 编码 HTTP POST 数据 (H) --data-binary DATA binary 编码 HTTP POST 数据 (H) --data-urlencode DATA url 编码 HTTP POST 数据 (H) --delegation STRING GSS-API 委托权限 --digest 使用数字身份验证 (H) --disable-eprt 禁止使用 EPRT 或 LPRT (F) --disable-epsv 禁止使用 EPSV (F) -D, --dump-header FILE 将头信息写入指定的文件 --egd-file FILE 为随机数据设置EGD socket路径(SSL) --engine ENGINGE 加密引擎 (SSL). \"--engine list\" 指定列表 -f, --fail 连接失败时不显示HTTP错误信息 (H) -F, --form CONTENT 模拟 HTTP 表单数据提交（multipart POST） (H) --form-string STRING 模拟 HTTP 表单数据提交 (H) --ftp-account DATA 帐户数据提交 (F) --ftp-alternative-to-user COMMAND 指定替换 \"USER [name]\" 的字符串 (F) --ftp-create-dirs 如果不存在则创建远程目录 (F) --ftp-method [MULTICWD/NOCWD/SINGLECWD] 控制 CWD (F) --ftp-pasv 使用 PASV/EPSV 替换 PORT (F) -P, --ftp-port ADR 使用指定 PORT 及地址替换 PASV (F) --ftp-skip-pasv-ip 跳过 PASV 的IP地址 (F) --ftp-pret 在 PASV 之前发送 PRET (drftpd) (F) --ftp-ssl-ccc 在认证之后发送 CCC (F) --ftp-ssl-ccc-mode ACTIVE/PASSIVE 设置 CCC 模式 (F) --ftp-ssl-control ftp 登录时需要 SSL/TLS (F) -G, --get 使用 HTTP GET 方法发送 -d 数据 (H) -g, --globoff 禁用的 URL 队列 及范围使用 {} 和 [] -H, --header LINE 要发送到服务端的自定义请求头 (H) -I, --head 仅显示响应文档头 -h, --help 显示帮助 -0, --http1.0 使用 HTTP 1.0 (H) --ignore-content-length 忽略 HTTP Content-Length 头 -i, --include 在输出中包含协议头 (H/F) -k, --insecure 允许连接到 SSL 站点，而不使用证书 (H) --interface INTERFACE 指定网络接口／地址 -4, --ipv4 将域名解析为 IPv4 地址 -6, --ipv6 将域名解析为 IPv6 地址 -j, --junk-session-cookies 读取文件中但忽略会话cookie (H) --keepalive-time SECONDS keepalive 包间隔 --key KEY 私钥文件名 (SSL/SSH) --key-type TYPE 私钥文件类型 (DER/PEM/ENG) (SSL) --krb LEVEL 启用指定安全级别的 Kerberos (F) --libcurl FILE 命令的libcurl等价代码 --limit-rate RATE 限制传输速度 -l, --list-only 只列出FTP目录的名称 (F) --local-port RANGE 强制使用的本地端口号 -L, --location 跟踪重定向 (H) --location-trusted 类似 --location 并发送验证信息到其它主机 (H) -M, --manual 显示全手动 --mail-from FROM 从这个地址发送邮件 --mail-rcpt TO 发送邮件到这个接收人(s) --mail-auth AUTH 原始电子邮件的起始地址 --max-filesize BYTES 下载的最大文件大小 (H/F) --max-redirs NUM 最大重定向数 (H) -m, --max-time SECONDS 允许的最多传输时间 --metalink 处理指定的URL上的XML文件 --negotiate 使用 HTTP Negotiate 认证 (H) -n, --netrc 必须从 .netrc 文件读取用户名和密码 --netrc-optional 使用 .netrc 或 URL; 将重写 -n 参数 --netrc-file FILE 设置要使用的 netrc 文件名 -N, --no-buffer 禁用输出流的缓存 --no-keepalive 禁用 connection 的 keepalive --no-sessionid 禁止重复使用 SSL session-ID (SSL) --noproxy 不使用代理的主机列表 --ntlm 使用 HTTP NTLM 认证 (H) -o, --output FILE 将输出写入文件，而非 stdout --pass PASS 传递给私钥的短语 (SSL/SSH) --post301 在 301 重定向后不要切换为 GET 请求 (H) --post302 在 302 重定向后不要切换为 GET 请求 (H) --post303 在 303 重定向后不要切换为 GET 请求 (H) -#, --progress-bar 以进度条显示传输进度 --proto PROTOCOLS 启用/禁用 指定的协议 --proto-redir PROTOCOLS 在重定向上 启用/禁用 指定的协议 -x, --proxy [PROTOCOL://]HOST[:PORT] 在指定的端口上使用代理 --proxy-anyauth 在代理上使用 \"any\" 认证方法 (H) --proxy-basic 在代理上使用 Basic 认证 (H) --proxy-digest 在代理上使用 Digest 认证 (H) --proxy-negotiate 在代理上使用 Negotiate 认证 (H) --proxy-ntlm 在代理上使用 NTLM 认证 (H) -U, --proxy-user USER[:PASSWORD] 代理用户名及密码 --proxy1.0 HOST[:PORT] 在指定的端口上使用 HTTP/1.0 代理 -p, --proxytunnel 使用HTTP代理 (用于 CONNECT) --pubkey KEY 公钥文件名 (SSH) -Q, --quote CMD 在传输开始前向服务器发送命令 (F/SFTP) --random-file FILE 读取随机数据的文件 (SSL) -r, --range RANGE 仅检索范围内的字节 --raw 使用原始HTTP传输，而不使用编码 (H) -e, --referer Referer URL (H) -J, --remote-header-name 从远程文件读取头信息 (H) -O, --remote-name 将输出写入远程文件 --remote-name-all 使用所有URL的远程文件名 -R, --remote-time 将远程文件的时间设置在本地输","date":"2022-03-28","objectID":"/curl%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:1:3","tags":["curl"],"title":"curl命令使用教程","uri":"/curl%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["Linux"],"content":"4. curl命令的使用范例 curl是一种命令行工具，作用是发出网络请求，然后得到和提取数据，显示在\"标准输出\"（stdout）上面。 它支持多种协议，下面举例讲解如何将它用于网站开发。 一、查看网页源码 直接在curl命令后加上网址，就可以看到网页源码。我们以网址www.sina.com为例（选择该网址，主要因为它的网页代码较短）： curl www.sina.com \u003c!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"\u003e \u003chtml\u003e\u003chead\u003e \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e \u003c/head\u003e\u003cbody\u003e \u003ch1\u003eMoved Permanently\u003c/h1\u003e \u003cp\u003eThe document has moved \u003ca href=\"http://www.sina.com.cn/\"\u003ehere\u003c/a\u003e.\u003c/p\u003e \u003c/body\u003e\u003c/html\u003e 如果要把这个网页保存下来，可以使用`-o`参数，这就相当于使用wget命令了。 curl -o [文件名] www.sina.com 二、自动跳转 有的网址是自动跳转的。使用`-L`参数，curl就会跳转到新的网址。 curl -L www.sina.com 键入上面的命令，结果就自动跳转为www.sina.com.cn。 三、显示头信息 `-i`参数可以显示http response的头信息，连同网页代码一起。 curl -i www.sina.com HTTP/1.0 301 Moved Permanently Date: Sat, 03 Sep 2011 23:44:10 GMT Server: Apache/2.0.54 (Unix) Location: http://www.sina.com.cn/ Cache-Control: max-age=3600 Expires: Sun, 04 Sep 2011 00:44:10 GMT Vary: Accept-Encoding Content-Length: 231 Content-Type: text/html; charset=iso-8859-1 Age: 3239 X-Cache: HIT from sh201-9.sina.com.cn Connection: close \u003c!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"\u003e \u003chtml\u003e\u003chead\u003e \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e \u003c/head\u003e\u003cbody\u003e \u003ch1\u003eMoved Permanently\u003c/h1\u003e \u003cp\u003eThe document has moved \u003ca href=\"http://www.sina.com.cn/\"\u003ehere\u003c/a\u003e.\u003c/p\u003e \u003c/body\u003e\u003c/html\u003e `-I`参数则是只显示http response的头信息。 四、显示通信过程 `-v`参数可以显示一次http通信的整个过程，包括端口连接和http request头信息。 curl -v www.sina.com * About to connect() to www.sina.com port 80 (#0) * Trying 61.172.201.195... connected * Connected to www.sina.com (61.172.201.195) port 80 (#0) \u003e GET / HTTP/1.1 \u003e User-Agent: curl/7.21.3 (i686-pc-linux-gnu) libcurl/7.21.3 OpenSSL/0.9.8o zlib/1.2.3.4 libidn/1.18 \u003e Host: www.sina.com \u003e Accept: */* \u003e * HTTP 1.0, assume close after body \u003c HTTP/1.0 301 Moved Permanently \u003c Date: Sun, 04 Sep 2011 00:42:39 GMT \u003c Server: Apache/2.0.54 (Unix) \u003c Location: http://www.sina.com.cn/ \u003c Cache-Control: max-age=3600 \u003c Expires: Sun, 04 Sep 2011 01:42:39 GMT \u003c Vary: Accept-Encoding \u003c Content-Length: 231 \u003c Content-Type: text/html; charset=iso-8859-1 \u003c X-Cache: MISS from sh201-19.sina.com.cn \u003c Connection: close \u003c \u003c!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"\u003e \u003chtml\u003e\u003chead\u003e \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e \u003c/head\u003e\u003cbody\u003e \u003ch1\u003eMoved Permanently\u003c/h1\u003e \u003cp\u003eThe document has moved \u003ca href=\"http://www.sina.com.cn/\"\u003ehere\u003c/a\u003e.\u003c/p\u003e \u003c/body\u003e\u003c/html\u003e * Closing connection #0 如果你觉得上面的信息还不够，那么下面的命令可以查看更详细的通信过程。 curl --trace output.txt www.sina.com 或者 curl --trace-ascii output.txt www.sina.com 运行后，请打开output.txt文件查看。 五、发送表单信息 发送表单信息有GET和POST两种方法。GET方法相对简单，只要把数据附在网址后面就行。 curl example.com/form.cgi?data=xxx POST方法必须把数据和网址分开，curl就要用到--data参数。 curl -X POST --data \"data=xxx\" example.com/form.cgi 如果你的数据没有经过表单编码，还可以让curl为你编码，参数是`--data-urlencode`。 curl -X POST--data-urlencode \"date=April 1\" example.com/form.cgi 六、HTTP动词 curl默认的HTTP动词是GET，使用`-X`参数可以支持其他动词。 curl -X POST www.example.com curl -X DELETE www.example.com 七、文件上传 假定文件上传的表单是下面这样： \u003cform method=\"POST\" enctype='multipart/form-data' action=\"upload.cgi\"\u003e \u003cinput type=file name=upload\u003e \u003cinput type=submit name=press value=\"OK\"\u003e \u003c/form\u003e 你可以用curl这样上传文件： curl --form upload=@localfilename --form press=OK [URL] 八、Referer字段 有时你需要在http request头信息中，提供一个referer字段，表示你是从哪里跳转过来的。 curl --referer http://www.example.com http://www.example.com 九、User Agent字段 这个字段是用来表示客户端的设备信息。服务器有时会根据这个字段，针对不同设备，返回不同格式的网页，比如手机版和桌面版。 iPhone4的User Agent是 Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_0 like Mac OS X; en-us) AppleWebKit/532.9 (KHTML, like Gecko) Version/4.0.5 Mobile/8A293 Safari/6531.22.7 curl可以这样模拟： curl --user-agent \"[User Agent]\" [URL] 十、cookie 使用`--cookie`参数，可以让curl发送cookie。 curl --cookie \"name=xxx\" www.example.com 至于具体的cookie的值，可以从http response头信息的`Set-Cookie`字段中得到。 `-c cookie-file`可以保存服务器返回的cookie到文件，`-b cookie-file`可以使用这个文件作为cookie信息，进行后续的请求。 curl -c cookies http://example.com curl -b cookies http://example.com 十一、增加头信息 有时需要在http request之中，自行增加一个头信息。`--header`参数就可以起到这个作用。 curl --header \"Content-Type:application/json\" http://example.com 十二、HTTP认证 有些网域需要HTTP认证，这时curl需要用到`--user`参数。 curl --user name:password example.com 不带有任何参数时，curl","date":"2022-03-28","objectID":"/curl%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:1:4","tags":["curl"],"title":"curl命令使用教程","uri":"/curl%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["软件安装"],"content":"问题 今天遇到无法在Ubuntu20.04环境中下载了VSCode，却无法在VSCode中切换中文输入法，只能输入英文。 ","date":"2022-03-27","objectID":"/vscode%E5%9C%A8ubuntu%E4%B8%8B%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5/:0:1","tags":["Ubuntu","VSCode"],"title":"VSCode在Ubuntu下无法使用中文输入","uri":"/vscode%E5%9C%A8ubuntu%E4%B8%8B%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5/"},{"categories":["软件安装"],"content":"问题原因 VSCode是使用Ubuntu自带的商店下载的，所以无法使用，具体原因不知。 ","date":"2022-03-27","objectID":"/vscode%E5%9C%A8ubuntu%E4%B8%8B%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5/:0:2","tags":["Ubuntu","VSCode"],"title":"VSCode在Ubuntu下无法使用中文输入","uri":"/vscode%E5%9C%A8ubuntu%E4%B8%8B%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5/"},{"categories":["软件安装"],"content":"问题解决 1.先卸载已安装的VSCode snap remove code 2.从VSCode官网下载对应版本的安装包重新安装 下载地址链接：https://code.visualstudio.com/Download ","date":"2022-03-27","objectID":"/vscode%E5%9C%A8ubuntu%E4%B8%8B%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5/:0:3","tags":["Ubuntu","VSCode"],"title":"VSCode在Ubuntu下无法使用中文输入","uri":"/vscode%E5%9C%A8ubuntu%E4%B8%8B%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5/"},{"categories":["Linux"],"content":"邮件常常是Linux下监控报警手段之一。Linux下的mail命令可以方便，快速的完成发送邮件。下面以CentOS为例 ","date":"2021-12-09","objectID":"/linux%E4%B8%8B%E4%BD%BF%E7%94%A8mail%E5%B7%A5%E5%85%B7%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/:0:0","tags":["mail"],"title":"Linux下使用mail工具发送邮件","uri":"/linux%E4%B8%8B%E4%BD%BF%E7%94%A8mail%E5%B7%A5%E5%85%B7%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"},{"categories":["Linux"],"content":"1.安装mailx yum install mailx ","date":"2021-12-09","objectID":"/linux%E4%B8%8B%E4%BD%BF%E7%94%A8mail%E5%B7%A5%E5%85%B7%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/:1:0","tags":["mail"],"title":"Linux下使用mail工具发送邮件","uri":"/linux%E4%B8%8B%E4%BD%BF%E7%94%A8mail%E5%B7%A5%E5%85%B7%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"},{"categories":["Linux"],"content":"2.配置 vi /etc/mail.rc 在文件尾加上如下配置 （注:因为163的设置相对简单些，以163邮箱为例，QQ邮箱等，其他邮箱因为安全等因素，需要设置的比较多，具体的可以搞下，本文不作重点。QQ邮箱也是可以的，需要开启smtp服务，并生成授权码） set from=zabbix@163.com set smtp=smtp.163.com set smtp-auth-user=zabbix@163.com set smtp-auth-password=邮箱密码 set smtp-auth=login ","date":"2021-12-09","objectID":"/linux%E4%B8%8B%E4%BD%BF%E7%94%A8mail%E5%B7%A5%E5%85%B7%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/:2:0","tags":["mail"],"title":"Linux下使用mail工具发送邮件","uri":"/linux%E4%B8%8B%E4%BD%BF%E7%94%A8mail%E5%B7%A5%E5%85%B7%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"},{"categories":["Linux"],"content":"3.发送邮件测试 echo \"Content\" | mail -s \"Title\" abc@163.com 带附件的邮件(需要注意的是目标邮箱一定要放在最后写) echo \"Content\" | mail -s \"Title\" -a \u003c附件\u003e abc@163.com ","date":"2021-12-09","objectID":"/linux%E4%B8%8B%E4%BD%BF%E7%94%A8mail%E5%B7%A5%E5%85%B7%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/:3:0","tags":["mail"],"title":"Linux下使用mail工具发送邮件","uri":"/linux%E4%B8%8B%E4%BD%BF%E7%94%A8mail%E5%B7%A5%E5%85%B7%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"},{"categories":["VMware"],"content":"在VMware虚拟机中安装CentOS 7的mini版本，没有UI界面，需要手动配置网络，才能联网。 ","date":"2021-12-01","objectID":"/vmware%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%ADcentos7%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/:0:0","tags":["VMware"],"title":"VMware虚拟机中CentOS7系统网络配置","uri":"/vmware%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%ADcentos7%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"},{"categories":["VMware"],"content":"VMware虚拟网络编辑器设置 在\u003c 编辑 \u003e选项 中打开虚拟网络编辑器： \" \r 虚拟网络编辑器如图所示： \" \r 点击右下方的\u003c 更改设置 \u003e选项，然后如图设置 \" \r \" \r ","date":"2021-12-01","objectID":"/vmware%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%ADcentos7%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/:1:0","tags":["VMware"],"title":"VMware虚拟机中CentOS7系统网络配置","uri":"/vmware%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%ADcentos7%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"},{"categories":["VMware"],"content":"CentOS 中配置文件 ip addr 查看网卡名称为ens33： \" \r 更改配置文件/etc/sysconfig/network-scripts/ifcfg-ens33 TYPE=Ethernet PROXY_METHOD=none BROWSER_ONLY=no BOOTPROTO=static #改为static，表示静态IP，IP不会变 DEFROUTE=yes IPV4_FAILURE_FATAL=no IPV6INIT=yes IPV6_AUTOCONF=yes IPV6_DEFROUTE=yes IPV6_FAILURE_FATAL=no IPV6_ADDR_GEN_MODE=stable-privacy NAME=ens33 UUID=9a344100-a68f-48bd-8c76-104ca488d1e9 DEVICE=ens33 ONBOOT=yes #开机自动读取该配置文件 IPADDR=192.168.70.110 ##自己设置的静态IP NETMASK=255.255.255.0 ##子网掩码 GATEWAY=192.168.70.2 ##网关 DNS1=8.8.8.8 ## DNS DNS2=8.8.4.4 systemctl restart network 让网络配置生效 ","date":"2021-12-01","objectID":"/vmware%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%ADcentos7%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/:2:0","tags":["VMware"],"title":"VMware虚拟机中CentOS7系统网络配置","uri":"/vmware%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%ADcentos7%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"},{"categories":["VMware"],"content":"对于本地宿主机的配置 \r \" \r 配置结束虚拟机就可以上网了 ","date":"2021-12-01","objectID":"/vmware%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%ADcentos7%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/:3:0","tags":["VMware"],"title":"VMware虚拟机中CentOS7系统网络配置","uri":"/vmware%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%ADcentos7%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"},{"categories":["Centos7"],"content":"安装系统时，如果 /boot 分区给的空间太少，在更新时可能就会显示 /boot 空间不足的 error，因为 Linux 更新时会保留近几次更新的 kernel，因此出现错误时，我们可以把一些比较旧的 kernel 删掉，帮 /boot 释放空间。 以下方法适用于 CentOS 7 与 CentOS 8 开机时可以看到目前系统里有 4 个版本的 kernel（rescue 不算） \r \" \r 编辑 /etc/yum.conf，并将下面的参数更改为 2 或 3 installonly_limit=2 这个参数表示让 package manager 保留多少个 kernel 档，一般的使用者保留目前的与前一、两个版本其实就够了。 安裝 yum-utils yum install yum-utils 清除旧的 kernels package-cleanup --oldkernels --count=2 完成后，系统就只会留下近两个版本的 kernel，/boot 的空间也就释放出来啦！ （个人建议 /boot 空间最好大于 500MB，就不太会碰到这个问题了） 重开机看一下 \" \r 剩下两个 kernel 了 ","date":"2021-11-25","objectID":"/centos7%E9%81%87%E5%88%B0-boot%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%E7%9A%84%E6%8A%A5%E9%94%99%E6%97%A0%E6%B3%95%E8%BF%9B%E8%A1%8Ckernel%E6%9B%B4%E6%96%B0/:0:0","tags":["centos7问题（报错）"],"title":"centos7遇到/boot空间不足的报错，无法进行kernel更新","uri":"/centos7%E9%81%87%E5%88%B0-boot%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%E7%9A%84%E6%8A%A5%E9%94%99%E6%97%A0%E6%B3%95%E8%BF%9B%E8%A1%8Ckernel%E6%9B%B4%E6%96%B0/"},{"categories":["Git"],"content":"参考文章：猴子都能懂得GIT入门 ","date":"2021-11-24","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/:0:0","tags":["Git"],"title":"Git版本控制教程（高级篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/"},{"categories":["Git"],"content":"一、操作分支 ","date":"2021-11-24","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/:1:0","tags":["Git"],"title":"Git版本控制教程（高级篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/"},{"categories":["Git"],"content":"0. 事前预备 首先建立一个新目录，并在里面建立一个空数据库。这里我们创建一个名为tutorial的目录。 $ mkdir tutorial $ cd tutorial $ git init Initialized empty Git repository in /Users/eguchi/Desktop/tutorial/.git/ 在tutorial目录创建一个名为myfile.txt的档案，然后提交。 连猴子都懂的Git命令 $ git add myfile.txt $ git commit -m \"first commit\" [master (root-commit) a73ae49] first commit 1 files changed, 1 insertions(+), 0 deletions(-) create mode 100644 myfile.txt 目前的历史记录是这样的。 \" \r ","date":"2021-11-24","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/:1:1","tags":["Git"],"title":"Git版本控制教程（高级篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/"},{"categories":["Git"],"content":"1. 建立分支 创建名为issue1的分支。 您可以通过branch命令来创建分支。 git branch \u003cbranchname\u003e 创建名为issue1的分支。 git branch issue1 不指定参数直接执行branch命令的话，可以显示分支列表。 前面有*的就是现在的分支。 $ git branch issue1 * master 目前的历史记录是这样的。 \" \r ","date":"2021-11-24","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/:1:2","tags":["Git"],"title":"Git版本控制教程（高级篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/"},{"categories":["Git"],"content":"2. 切换分支 若要在新建的issue1分支进行提交，需要切换到issue1分支。 要执行checkout命令以退出分支。 git checkout \u003cbranch\u003e 切换到issue1分支。 $ git checkout issue1 Switched to branch 'issue1' 目前的历史记录是这样的。 \" \r 在checkout命令指定 -b选项执行，可以创建分支并进行切换。 git checkout -b \u003cbranch\u003e 在切换到issue1分支的状态下提交，历史记录会被记录到issue1分支。在myfile.txt添加add命令的说明后再提交。 连猴子都懂的Git命令 add 把变更录入到索引中 $ git add myfile.txt $ git commit -m \"添加add的说明\" [issue1 b2b23c4] 添加add的说明 1 files changed, 1 insertions(+), 0 deletions(-) 目前的历史记录是这样的。 \" \r ","date":"2021-11-24","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/:1:3","tags":["Git"],"title":"Git版本控制教程（高级篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/"},{"categories":["Git"],"content":"3. 合并分支 向master分支合并issue1分支的修改。 \" \r 执行merge命令以合并分支 git merge \u003ccommit\u003e 该命令将指定分支导入到HEAD指定的分支。先切换master分支，然后把issue1分支导入到master分支。 $ git checkout master Switched to branch 'master' 打开myfile.txt档案以确认内容。 连猴子都懂的Git命令 已经在issue1分支进行了编辑上一页的档案，所以master分支的myfile.txt的内容没有更改。 $ git merge issue1 Updating 1257027..b2b23c4 Fast-forward myfile.txt | 1 + 1 files changed, 1 insertions(+), 0 deletions(-) master分支指向的提交移动到和issue1同样的位置。这个是fast-forward（快进）合并。 \r \" \r 打开myfile.txt档案，确认内容。 连猴子都懂的Git命令 add 把变更录入到索引中 已添加「add 把变更录入到索引中」。 ","date":"2021-11-24","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/:1:4","tags":["Git"],"title":"Git版本控制教程（高级篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/"},{"categories":["Git"],"content":"4. 删除分支 既然issue1分支的内容已经顺利地合并到master分支了，现在可以将其删除了。 在branch命令指定-d选项执行，以删除分支。 git branch -d \u003cbranchname\u003e 执行以下的命令以删除issue1分支。 $ git branch -d issue1 Deleted branch issue1 (was b2b23c4). issue1分支被删除了。您可以用branch命令来确认分支是否已被删除。 $ git branch * master \r \" \r ","date":"2021-11-24","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/:1:5","tags":["Git"],"title":"Git版本控制教程（高级篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/"},{"categories":["Git"],"content":"5. 并行操作 接下来，创建2个分支来尝试并行操作吧。 首先创建issue2分支和issue3分支，并切换到issue2分支。 $ git branch issue2 $ git branch issue3 $ git checkout issue2 Switched to branch 'issue2' $ git branch * issue2 issue3 master \r \" \r 在issue2分支的myfile.txt添加commit命令的说明后提交。 连猴子都懂的Git命令 add 把变更录入到索引中 commit 记录索引的状态 $ git add myfile.txt $ git commit -m \"添加commit的说明\" [issue2 8f7aa27] 添加commit的说明 1 files changed, 2 insertions(+), 0 deletions(-) \r \" \r 接着，切换到issue3分支。 $ git checkout issue3 Switched to branch 'issue3' 打开myfile.txt档案。由于在issue2分支添加了commit命令的说明，所以issue3分支的myfile.txt里只有add命令的说明。 添加pull命令的说明后提交。 连猴子都懂的Git命令 add 把变更录入到索引中 pull 取得远端数据库的内容 $ git add myfile.txt $ git commit -m \"添加pull的说明\" [issue3 e5f91ac] 添加pull的说明 1 files changed, 2 insertions(+), 0 deletions(-) \r \" \r 这样，添加commit的说明的操作，和添加pull的说明的操作就并行进行了。 ","date":"2021-11-24","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/:1:6","tags":["Git"],"title":"Git版本控制教程（高级篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/"},{"categories":["Git"],"content":"6. 解决合并的冲突 把issue2分支和issue3分支的修改合并到master。 切换master分支后，与issue2分支合并。 $ git checkout master Switched to branch 'master' $ git merge issue2 Updating b2b23c4..8f7aa27 Fast-forward myfile.txt | 2 ++ 1 files changed, 2 insertions(+), 0 deletions(-) 执行fast-forward（快进）合并。 \" \r 接着合并issue3分支。 $ git merge issue3 Auto-merging myfile.txt CONFLICT (content): Merge conflict in myfile.txt Automatic merge failed; fix conflicts and then commit the result. 自动合并失败。由于在同一行进行了修改，所以产生了冲突。这时myfile.txt的内容如下： 连猴子都懂的Git命令 add 把变更录入到索引中 \u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD commit 记录索引的状态 ======= pull 取得远端数据库的内容 \u003e\u003e\u003e\u003e\u003e\u003e\u003e issue3 在发生冲突的地方，Git生成了内容的差异。请做以下修改： 连猴子都懂的Git命令 add 把变更录入到索引中 commit 记录索引的状态 pull 取得远端数据库的内容 修改冲突的部分，重新提交。 $ git add myfile.txt $ git commit -m \"合并issue3分支\" # On branch master nothing to commit (working directory clean) 历史记录如下图所示。因为在这次合并中修改了冲突部分，所以会重新创建合并修改的提交记录。这样，master的HEAD就移动到这里了。这种合并不是fast-forward合并，而是non fast-forward合并。 \" \r ","date":"2021-11-24","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/:1:7","tags":["Git"],"title":"Git版本控制教程（高级篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/"},{"categories":["Git"],"content":"7. 用rebase合并 合并issue3分支的时候，使用rebase可以使提交的历史记录显得更简洁。 现在暂时取消刚才的合并。 git reset --hard HEAD~ \r \" \r 切换到issue3分支后，对master执行rebase。 $ git checkout issue3 Switched to branch 'issue3' $ git rebase master First, rewinding head to replay your work on top of it... Applying: 添加pull的说明 Using index info to reconstruct a base tree... \u003cstdin\u003e:13: new blank line at EOF. + warning: 1 line adds whitespace errors. Falling back to patching base and 3-way merge... Auto-merging myfile.txt CONFLICT (content): Merge conflict in myfile.txt Failed to merge in the changes. Patch failed at 0001 添加pull的说明 When you have resolved this problem run \"git rebase --continue\". If you would prefer to skip this patch, instead run \"git rebase --skip\". To check out the original branch and stop rebasing run \"git rebase --abort\". 和merge时的操作相同，修改在myfile.txt发生冲突的部分。 连猴子都懂的Git命令 add 把变更录入到索引中 \u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD commit 记录索引的状态 ======= pull 取得远端数据库的内容 \u003e\u003e\u003e\u003e\u003e\u003e\u003e issue3 rebase的时候，修改冲突后的提交不是使用commit命令，而是执行rebase命令指定 –continue选项。若要取消rebase，指定 –abort选项。 $ git add myfile.txt $ git rebase --continue Applying: 添加pull的说明 \r \" \r 这样，在master分支的issue3分支就可以fast-forward合并了。切换到master分支后执行合并。 $ git checkout master Switched to branch 'master' $ git merge issue3 Updating 8f7aa27..96a0ff0 Fast-forward myfile.txt | 1 + 1 files changed, 1 insertions(+), 0 deletions(-) myfile.txt的最终内容和merge是一样的，但是历史记录如下。 \" \r ","date":"2021-11-24","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/:1:8","tags":["Git"],"title":"Git版本控制教程（高级篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/"},{"categories":["Git"],"content":"二、操作标签 ","date":"2021-11-24","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/:2:0","tags":["Git"],"title":"Git版本控制教程（高级篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/"},{"categories":["Git"],"content":"1. 添加轻标签 使用tag命令来添加标签，在\u003c tagname \u003e执行标签的名称 git tag \u003ctagname\u003e 在HEAD指向的提交里添加名为apple的标签，请执行以下的命令。 git tag apple 如果没有使用参数而执行tag，可以显示标签列表。 $ git tag apple 如果在log命令添加 –decorate选项执行，可以显示包含标签资料的历史记录。 $ git log --decorate commit e7978c94d2104e3e0e6e4a5b4a8467b1d2a2ba19 (HEAD, tag: apple, master) Author: yourname \u003cyourname@yourmail.com\u003e Date: Wed Jul 18 16:43:27 2012 +0900 first commit \r \" \r ","date":"2021-11-24","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/:2:1","tags":["Git"],"title":"Git版本控制教程（高级篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/"},{"categories":["Git"],"content":"2. 添加注解标签 若要添加注解标签，可以在tag命令指定 -a选项执行。执行后会启动编辑区，请输入注解，也可以指定-m选项来添加注解。 git tag -a \u003ctagname\u003e 在HEAD指向的提交里添加名为banana的标签，请执行以下的命令。 git tag -am \"连猴子都懂的Git\" banana 如果在tag命令指定-n选项执行，可以显示标签的列表和注解。 $ git tag -n apple first commit banana 连猴子都懂的Git \r \" \r ","date":"2021-11-24","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/:2:2","tags":["Git"],"title":"Git版本控制教程（高级篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/"},{"categories":["Git"],"content":"3. 删除标签 若要删除标签，在tag命令指定 -d选项执行。 git tag -d \u003ctagname\u003e \r \" \r ","date":"2021-11-24","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/:2:3","tags":["Git"],"title":"Git版本控制教程（高级篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/"},{"categories":["Git"],"content":"三、改写提交！ 为了节省时间，这个教程使用现有的历史记录作为本地数据库。 wget https://backlog.com/git-tutorial/cn/download/stepup-tutorial.zip ","date":"2021-11-24","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/:3:0","tags":["Git"],"title":"Git版本控制教程（高级篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/"},{"categories":["Git"],"content":"1. commit –amend 我们将修改最近一次的提交。 首先进入stepup-tutorial/tutorial1目录。本地端的历史记录状态如下图显示。 \" \r 用log命令确认历史记录。 $ git log commit 326fc9f70d022afdd31b0072dbbae003783d77ed Author: yourname \u003cyourname@yourmail.com\u003e Date: Mon Jul 16 23:17:56 2012 +0900 添加add的说明 commit 48eec1ddf73a7fb508ef664efd6b3d873631742f Author: yourname \u003cyourname@yourmail.com\u003e Date: Mon Jul 16 23:16:14 2012 +0900 first commit 首先打开sample.txt档案，并添加commit的注释。 连猴子都懂的Git命令 add 把变更录入到索引中 commit 记录索引的状态 添加 –amend 选项，然后提交。 git add sample.txt git commit --amend 编辑工具会显示最近一次提交的提交消息，把消息修改为「添加add和commit的讲解」并进行保存。 现在已经修改了提交的内容，然后用log命令确认历史记录和提交消息。 \" \r $ git log commit e9d75a02e62814541ee0410d9c1d1bf47ab1c057 Author: yourname \u003cyourname@yourmail.com\u003e Date: Mon Jul 16 23:17:56 2012 +0900 添加add和commit的讲解 commit 48eec1ddf73a7fb508ef664efd6b3d873631742f Author: yourname \u003cyourname@yourmail.com\u003e Date: Mon Jul 16 23:16:14 2012 +0900 first commit ","date":"2021-11-24","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/:3:1","tags":["Git"],"title":"Git版本控制教程（高级篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/"},{"categories":["Git"],"content":"2. revert 我们将用revert命令来取消「添加pull的讲解」提交。 首先进入stepup-tutorial/tutorial2目录。本地端的历史记录的状态如下图显示。 \" \r ","date":"2021-11-24","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/:3:2","tags":["Git"],"title":"Git版本控制教程（高级篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/"},{"categories":["Git"],"content":"3. reset ","date":"2021-11-24","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/:3:3","tags":["Git"],"title":"Git版本控制教程（高级篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/"},{"categories":["Git"],"content":"4. cherry-pick ","date":"2021-11-24","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/:3:4","tags":["Git"],"title":"Git版本控制教程（高级篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/"},{"categories":["Git"],"content":"5. 用rebase -i 汇总提交 ","date":"2021-11-24","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/:3:5","tags":["Git"],"title":"Git版本控制教程（高级篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/"},{"categories":["Git"],"content":"6. 用rebase -i 修改提交 ","date":"2021-11-24","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/:3:6","tags":["Git"],"title":"Git版本控制教程（高级篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/"},{"categories":["Git"],"content":"7. merge –squash ","date":"2021-11-24","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/:3:7","tags":["Git"],"title":"Git版本控制教程（高级篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/"},{"categories":["Git"],"content":"本文参考：猴子都能懂的GIT ","date":"2021-11-23","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/:0:0","tags":["Git"],"title":"Git版本控制教程（入门篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/"},{"categories":["Git"],"content":"一、Git基础操作 ","date":"2021-11-23","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/:1:0","tags":["Git"],"title":"Git版本控制教程（入门篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/"},{"categories":["Git"],"content":"1. 安装Git 本文按照命令行方式来安装和使用git，如需windows的GUI可以使用tortoisegit。 windows安装方式：http://git-scm.com/ liunx安装: yum install -y git ","date":"2021-11-23","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/:1:1","tags":["Git"],"title":"Git版本控制教程（入门篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/"},{"categories":["Git"],"content":"2. 初期设定 安装Git之后，请输入您的用户名和电子邮件地址。该设置操作在安装Git后进行一次就够了。这些信息将作为提交者信息显示在更新历史中。 Git的设定被存放在用户本地目录的.gitconfig档案里。虽然可以直接编辑配置文件，但在这个教程里我们使用config命令。 git config --global user.name \"\u003c用户名\u003e\" git config --global user.email \"\u003c电子邮件\u003e\" 以下命令能让Git以彩色显示: git config --global color.ui auto 可以为Git命令设定别名。例如：把「checkout」缩略为「co」，然后就使用「co」来执行命令。 git config --global alias.co checkout Windows问题解决 报错LF will be replaced by CRLF in xxxx. The file will have its original line endings in your working directory. 原理： CRLF – Carriage-Return Line-Feed 回车换行 就是回车(CR, ASCII 13, \\r) 换行(LF, ASCII 10, \\n)。 这两个ACSII字符不会在屏幕有任何输出，但在Windows中广泛使用来标识一行的结束。 而在Linux/UNIX系统中只有换行符。 也就是说在windows中的换行符为 CRLF， 而在linux下的换行符为：LF 使用git来生成一个rails工程后，文件中的换行符为LF， 当执行git add .时，系统提示：LF 将被转换成 CRLF git config core.autocrlf false //禁用自动转换 如果如果在Windows使用命令行 (Git Bash), 含非ASCII字符的文件名会显示为 “\\346\\226\\260\\350\\246…\"。若设定如下，就可以让含非ASCII字符的文件名正确显示了。 git config --global core.quotepath off 若在Windows使用命令行，您只能输入ASCII字符。所以，如果您的提交信息包含非ASCII字符，请不要使用-m选项，而要用外部编辑器输入。 外部编辑器必须能与字符编码UTF-8和换行码LF兼容。 git config --global core.editor \"\\\"[使用编辑区的路径]\\\"\" ","date":"2021-11-23","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/:1:2","tags":["Git"],"title":"Git版本控制教程（入门篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/"},{"categories":["Git"],"content":"3. 新建本地数据库 接下来要在本地新建数据库，创建一个名称为「tutorial」的空目录，并把它放在Git管理之下。 下面将以这个目录进行教程讲解。 首先在任意一个地方创建tutorial目录。然后使用init命令把该tutorial目录移动到本地Git数据库。 git init 按照以下步骤把新创建的tutorial目录设置到Git数据库。 $ mkdir tutorial $ cd tutorial $ git init Initialized empty Git repository in /Users/yourname/Desktop/tutorial/.git/ ","date":"2021-11-23","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/:1:3","tags":["Git"],"title":"Git版本控制教程（入门篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/"},{"categories":["Git"],"content":"4. 提交文件 在tutorial目录新建一个文件，然后将文件添加到数据库。 首先在tutorial目录里新建一个名为「sample.txt」的文本文件，请在文件中输入以下的内容： 连猴子都懂的Git命令 请使用status命令确认工作树和索引的状态。 git status 执行status命令以确认tutorial目录的状态。 $ git status # On branch master # # Initial commit # # Untracked files: # (use \"git add \u003cfile\u003e...\" to include in what will be committed) # # sample.txt nothing added to commit but untracked files present (use \"git add\" to track) 从status响应我们可以看到‘sample.txt’目前不是历史记录对象。请首先把‘sample.txt’加入到索引，就可以追踪它的变更了。 将文件加入到索引，要使用add命令。在指定加入索引的文件。用空格分割可以指定多个文件。 $ git add \u003cfile\u003e.. tips 指定参数「.」，可以把所有的文件加入到索引。 git add . 现在，我们把sample.txt加入到索引然后确认一下。 $ git add sample.txt $ git status # On branch master # # Initial commit # # Changes to be committed: # (use \"git rm --cached \u003cfile\u003e...\" to unstage) # # new file: sample.txt # 既然sample.txt已加入到索引，我们就可以提交文件了。请执行如下显示的commit命令。 $ git commit -m \"\" 执行commit命令之后确认状态。 $ git commit -m \"first commit\" [master (root-commit) 116a286] first commit 0 files changed, 0 insertions(+), 0 deletions(-) create mode 100644 sample.txt $ git status # On branch master nothing to commit (working directory clean) 从status响应我们可以看到没有新的变更要提交。 使用log命令，我们可以在数据库的提交记录看到新的提交。 $ git log commit ac56e474afbbe1eab9ebce5b3ab48ac4c73ad60e Author: eguchi \u003ceguchi@nulab.co.jp\u003e Date: Thu Jul 12 18:00:21 2012 +0900 first commit ","date":"2021-11-23","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/:1:4","tags":["Git"],"title":"Git版本控制教程（入门篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/"},{"categories":["Git"],"content":"二、共享数据库(远程仓库) ","date":"2021-11-23","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/:2:0","tags":["Git"],"title":"Git版本控制教程（入门篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/"},{"categories":["Git"],"content":"1. 创建共享数据库（远程仓库） 在GitHub或服务器中创建git数据库，比较简单此处不做演示 ","date":"2021-11-23","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/:2:1","tags":["Git"],"title":"Git版本控制教程（入门篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/"},{"categories":["Git"],"content":"2. push到远程数据库 向远程数据库推送本地数据库的修改记录吧。 给远程数据库取别名 您可以给远程数据库取一个别名。这样，下次推送的时候就不需要输入长串的远程数据库地址了。在这个教程里，我们的远程数据库命名为“origin”。 请使用remote指令添加远程数据库。在处输入远程数据库名称，在处指定远程数据库的URL。 git remote add \u003cname\u003e \u003curl\u003e 通过运行以下指令，将创建于上一个页面的远程数据库的URL命名为“origin”。 $ git remote add origin https://[your_space_id].backlogtool.com/git/[your_project_key]/tutorial.git 执行推送或者拉取的时候，如果省略了远程数据库的名称，则默认使用名为”origin“的远程数据库。因此一般都会把远程数据库命名为origin。 push操作 GitHub仓库在push前，需要在GitHub中对本地数据库所在主机进行授权 使用push命令向数据库推送更改内容。\u003c repository \u003e处输入目标数据库地址或者远程数据库别名，\u003c refspec \u003e处指定推送的分支。我们将在高级篇详细地对分支进行说明。 git push \u003crepository\u003e \u003crefspec\u003e... 运行以下命令便可向远程数据库‘origin’进行推送。当执行命令时，如果您指定了-u选项，那么下一次推送时就可以省略分支名称了。但是，首次运行指令向空的远程数据库推送时，必须指定远程数据库名称和分支名称。 $ git push -u origin master Username: \u003c用户名\u003e Password: \u003c密码\u003e Counting objects: 3, done. Writing objects: 100% (3/3), 245 bytes, done. Total 3 (delta 0), reused 0 (delta 0) To https://nulab.backlog.jp/git/BLG/tutorial.git * [new branch] master -\u003e master ","date":"2021-11-23","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/:2:2","tags":["Git"],"title":"Git版本控制教程（入门篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/"},{"categories":["Git"],"content":"3. 克隆远程数据库 快试试克隆远程数据库吧，这样您在别的地方也可以工作了。 使用clone指令可以复制数据库，在\u003c repository \u003e指定远程数据库的URL， 在\u003c directory \u003e指定新目录的名称。 git clone \u003crepository\u003e \u003cdirectory\u003e 执行以下指令后，会在目录(tutorial2) 复制远程数据库。 $ git clone https://nulab.backlog.jp/git/BLG/tutorial.git tutorial2 Cloning into 'tutorial2'... Username: \u003c用户名\u003e Password: \u003c密码\u003e remote: Counting objects: 3, done. remote: Total 3 (delta 0), reused 0 (delta 0) Unpacking objects: 100% (3/3), done. 若要验证克隆是否成功，请看在复制的目录“tutorial2”中的sample.txt是否含有以下文字。 连猴子都懂的Git命令 ","date":"2021-11-23","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/:2:3","tags":["Git"],"title":"Git版本控制教程（入门篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/"},{"categories":["Git"],"content":"4. 从克隆的数据库进行push 首先，在之前克隆的数据库目录里的sample.txt 添加以下黑体字，并提交。 连猴子都懂的Git命令 add 把变更录入到索引中 $ git add sample.txt $ git commit -m \"添加add的说明\" [master 1ef5c8c] 添加add的说明 1 files changed, 1 insertions(+), 1 deletions(-) 用tutorial2进行的操作 然后，推送此次变更，更新远程数据库。 当在克隆的数据库目录执行推送时，您可以省略数据库和分支名称。 $ git push Username: \u003c用户名\u003e Password: \u003c密码\u003e Counting objects: 5, done. Delta compression using up to 4 threads. Compressing objects: 100% (2/2), done. Writing objects: 100% (3/3), 351 bytes, done. Total 3 (delta 0), reused 0 (delta 0) To https://nulab.backlog.jp/git/BLG/tutorial.git 486789c..1ef5c8c master -\u003e master ","date":"2021-11-23","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/:2:4","tags":["Git"],"title":"Git版本控制教程（入门篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/"},{"categories":["Git"],"content":"5. 从远程数据库pull 试试从远程数据库把最新变更内容拉取到tutorial吧。 我们把在上一页面中从“tutorial2”推送到远程数据库的内容拉取到数据库目录“tutorial”吧。 使用pull指令进行拉取操作。省略数据库名称的话，会在名为origin的数据库进行pull。 $ git pull \u003crepository\u003e \u003crefspec\u003e... 用tutorial进行的操作 $ git pull origin master Username: \u003c用户名\u003e Password: \u003c密码\u003e From https://nulab.backlog.jp/git/BLG/tutorial * branch master -\u003e FETCH_HEAD Updating ac56e47..3da09c1 Fast-forward sample.txt | 1 + 1 files changed, 1 insertions(+), 0 deletions(-) sample.txt文档的内容已更新。 ","date":"2021-11-23","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/:2:5","tags":["Git"],"title":"Git版本控制教程（入门篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/"},{"categories":["Git"],"content":"二、 整合修改记录 ","date":"2021-11-23","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/:3:0","tags":["Git"],"title":"Git版本控制教程（入门篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/"},{"categories":["Git"],"content":"1. push冲突的状态 现在，我们将要学习怎样解决冲突。 首先，我们用“tutorial”和“tutorial2”制造一个冲突状态。 用tutorial进行的操作 首先，打开tutorial目录的sample.txt文档，添加以下黑体字之后进行提交。 连猴子都懂的Git命令 add 把变更录入到索引中 commit 记录索引的状态 $ git add sample.txt $ git commit -m \"添加commit的说明\" [master 95f15c9] 添加commit的说明 1 files changed, 1 insertions(+), 0 deletions(-) 用tutorial2进行的操作 接下来，打开tutorial2目录的sample.txt文档，添加以下黑体字之后进行提交。 连猴子都懂的Git命令 add 把变更录入到索引中 pull 取得远端数据库的内容 $ git add sample.txt $ git commit -m \"添加pull的说明\" [master 4c01823] 添加pull的说明 1 files changed, 1 insertions(+), 0 deletions(-) 用tutorial2进行的操作 现在从tutorial2 推送内容到远程数据库。 $ git push Username: \u003c用户名\u003e Password: \u003c密码\u003e Counting objects: 5, done. Delta compression using up to 4 threads. Compressing objects: 100% (2/2), done. Writing objects: 100% (3/3), 391 bytes, done. Total 3 (delta 0), reused 0 (delta 0) To https://nulab.backlog.jp/git/BLG/tutorial.git 3da09c1..4c01823 master -\u003e master 用tutorial进行的操作 现在从tutorial推送内容到远程数据库吧。 $ git push Username: \u003c用户名\u003e Password: \u003c密码\u003e To https://nulab.backlog.jp/git/BLG/tutorial.git ! [rejected] master -\u003e master (non-fast-forward) error: failed to push some refs to 'https://nulab.backlog.jp/git/BLG/tutorial.git' To prevent you from losing history, non-fast-forward updates were rejected Merge the remote changes (e.g. 'git pull') before pushing again. See the 'Note about fast-forwards' section of 'git push --help' for details. ","date":"2021-11-23","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/:3:1","tags":["Git"],"title":"Git版本控制教程（入门篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/"},{"categories":["Git"],"content":"2. 解决冲突 为了把变更内容推送到远程数据库，我们必须手动解决冲突。首先请运行pull，以从远程数据库取得最新的变更记录吧。 用tutorial进行的操作 请执行以下指令。 $ git pull origin master Username: \u003c用户名\u003e Password: \u003c密码\u003e remote: Counting objects: 5, done. remote: Compressing objects: 100% (2/2), done. remote: Total 3 (delta 0), reused 0 (delta 0) Unpacking objects: 100% (3/3), done. From https://nulab.backlog.jp/git/BLG/tutorial * branch master -\u003e FETCH_HEAD Auto-merging sample.txt CONFLICT (content): Merge conflict in sample.txt Automatic merge failed; fix conflicts and then commit the result. 用tutorial进行的操作 讯息显示「Merge conflict in sample.txt」。请打开sample.txt文件，我们看到Git已添加标示以显示冲突部分。请为Git无法完成主动合并的部分做以下的修改。 连猴子都懂的Git命令 add 把变更录入到索引中 \u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD commit 记录索引的状态 ======= pull 取得远端数据库的内容 \u003e\u003e\u003e\u003e\u003e\u003e\u003e 4c0182374230cd6eaa93b30049ef2386264fe12a 用tutorial进行的操作 导入两方的修改，并删除多余的标示行以解决冲突。 连猴子都懂的Git命令 add 把变更录入到索引中 commit 记录索引的状态 pull 取得远端数据库的内容 用tutorial进行的操作 文件的内容发生了修改，所以需要进行提交。 $ git add sample.txt $ git commit -m \"合并\" [master d845b81] 合并 这样就完成了从远程数据库导入最新的修改内容。 用tutorial进行的操作 我们可以用log命令来确认数据库的历史记录是否准确。指定–graph选项，能以文本形式显示更新记录的流程图。指定–oneline选项，能在一行中显示提交的信息。 $ git log --graph --oneline * d845b81 合并 |\\ | * 4c01823 添加pull的说明 * | 95f15c9 添加commit的说明 |/ * 3da09c1 添加add的说明 * ac56e47 first commit 这表明两个修改记录已经整合了。 这时候，之前被拒绝的push应该可以通过了，push一下看看吧。 辛苦了！Git的基本使用方法的说明到这里就告一段落了。有关分支以及修改等更高阶的内容，请参见高级篇！ ","date":"2021-11-23","objectID":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/:3:2","tags":["Git"],"title":"Git版本控制教程（入门篇）","uri":"/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AF%87/"},{"categories":["科学上网"],"content":"准备工作 如果是新的vps，需要安装必要的工具： yum update yum install -y vim wget curl 需要将系统时间改为东八区，即上海时间： ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime ","date":"2021-11-19","objectID":"/v2ray-ws-tls%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/:0:1","tags":["v2ray"],"title":"V2ray+WS+TLS手动配置教程","uri":"/v2ray-ws-tls%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"},{"categories":["科学上网"],"content":"一、V2ray官方一键安装脚本 1.获取V2ray官方脚本 wget https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh 2.执行V2ray官方脚本 bash install-release.sh 3.安装文件分析 /usr/local/bin/v2ray：V2Ray 程序； /usr/local/bin/v2ctl：V2Ray 工具； /usr/local/etc/v2ray/config.json：配置文件； /usr/local/share/v2ray/geoip.dat：IP 数据文件 /usr/local/share/v2ray/geosite.dat：域名数据文件 4.安装最新的geoip.dat 和 geosite.dat wget https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-dat-release.sh \u0026\u0026 bash install-dat-release.sh 5.移除V2ray bash install-release.sh --remove ","date":"2021-11-19","objectID":"/v2ray-ws-tls%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/:0:2","tags":["v2ray"],"title":"V2ray+WS+TLS手动配置教程","uri":"/v2ray-ws-tls%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"},{"categories":["科学上网"],"content":"二、V2ray配置文件 直接获取配置文件 cd /usr/local/etc/v2ray \u0026\u0026 wget -O config.json https://raw.githubusercontent.com/eebond/banwagong/main/V2rayN/config.json 手动编写配置文件并粘贴配置文件 vim /usr/local/etc/v2ray/config.json 配置文件内容 { \"log\": { \"access\": \"/var/log/v2ray/access.log\", \"error\": \"/var/log/v2ray/error.log\", \"loglevel\": \"warning\" }, \"inbounds\": [ { \"listen\": \"127.0.0.1\", \"port\": 10086, \"protocol\": \"vmess\", \"settings\": { \"clients\": [ { \"id\": \"2e82cf13-4e82-4935-9ec7-23d0e0eb56b3\", \"level\": 1, \"alterId\": 0 } ] }, \"streamSettings\": { \"network\": \"ws\", \"security\": \"none\", \"wsSettings\": { \"path\": \"/vmess\" } } }, { \"listen\": \"127.0.0.1\", \"port\": 12345, \"protocol\": \"vless\", \"settings\": { \"decryption\": \"none\", \"clients\": [ { \"id\": \"b123c75b-ebdf-006a-eeea-bcf6a8242e42\", \"level\": 0 } ] }, \"streamSettings\": { \"network\":\"ws\", \"security\": \"none\", \"wsSettings\":{ \"path\":\"/vless\", \"headers\":{} } } }, { \"port\": 51888, \"protocol\": \"shadowsocks\", \"settings\": { \"method\": \"aes-256-gcm\", \"password\": \"www.bannedbook.org\", \"network\": \"tcp,udp\", \"level\": 0 } } ], \"outbounds\": [{ \"protocol\": \"freedom\", \"settings\": {} },{ \"protocol\": \"blackhole\", \"settings\": {}, \"tag\": \"blocked\" }], \"routing\": { \"rules\": [ { \"type\": \"field\", \"ip\": [\"geoip:private\"], \"outboundTag\": \"blocked\" } ] } } V2ctl生成uuid v2ctl uuid ","date":"2021-11-19","objectID":"/v2ray-ws-tls%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/:0:3","tags":["v2ray"],"title":"V2ray+WS+TLS手动配置教程","uri":"/v2ray-ws-tls%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"},{"categories":["科学上网"],"content":"三、运行V2ray服务端 启动V2ray服务 systemctl start v2ray 设置开机自启动 systemctl enable v2ray 测试V2ray配置文件正确性 v2ray -test -config /usr/local/etc/v2ray/config.json 控制 V2Ray 的运行的常用命令 service v2ray restart | force-reload |start|stop|status|reload TIPS 此时已经可以通过V2ray实现科学上网了。 ","date":"2021-11-19","objectID":"/v2ray-ws-tls%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/:0:4","tags":["v2ray"],"title":"V2ray+WS+TLS手动配置教程","uri":"/v2ray-ws-tls%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"},{"categories":["科学上网"],"content":"四、Nginx反向代理+TLS Nginx+TLS配置教程 https://eebond.github.io/centos7/centos-xia-shi-yong-certbot-shen-qing-bu-shu-let-s-encrpyt-mian-fei-ssl-zheng-shu-ngingx-fu-wu-qi/ Nginx配置文件 快速获取 wget -O /etc/nginx/conf.d/cloud.conf https://raw.githubusercontent.com/eebond/banwagong/main/Nginx/conf.d/blog.conf 手动输入 vim /etc/nginx/conf.d/blog.conf 配置文件 server { listen 80; listen [::]:80; server_name blog.eebond.xyz; rewrite ^(.*)$ https://$host$1 permanent; } # Settings for a TLS enabled server. server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name blog.eebond.xyz; root /srv/www/blog; ssl_certificate \"/etc/letsencrypt/live/blog.eebond.xyz/fullchain.pem\"; ssl_certificate_key \"/etc/letsencrypt/live/blog.eebond.xyz/privkey.pem\"; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; error_page 404 /404.html; location = /40x.html { } error_page 500 502 503 504 /50x.html; location = /50x.html { } location /vmess { if ($http_upgrade != \"websocket\") { return 404; } proxy_redirect off; proxy_pass http://127.0.0.1:10086; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } location /vless { if ($http_upgrade != \"websocket\") { return 404; } proxy_redirect off; proxy_pass http://127.0.0.1:12345; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } ","date":"2021-11-19","objectID":"/v2ray-ws-tls%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/:0:5","tags":["v2ray"],"title":"V2ray+WS+TLS手动配置教程","uri":"/v2ray-ws-tls%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"},{"categories":["科学上网"],"content":"参考文章：https://gfw.report/blog/ss_tutorial/zh/ ","date":"2021-11-19","objectID":"/centos-7-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2shadowsocks-libev/:0:0","tags":["shadowsocks-libev"],"title":"CentOS 7 安装部署Shadowsocks-libev","uri":"/centos-7-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2shadowsocks-libev/"},{"categories":["科学上网"],"content":"一、安装snap应用商店 1.安装EPEL yum install epel-release -y 2.安装snapd yum install snapd -y 3.添加snap启动通信socket systemctl enable --now snapd.socket 4.创建链接（snap软件包一般安装在/snap目录·下） ln -s /var/lib/snapd/snap /snap 5.安装snap core(更新) snap snap install core ","date":"2021-11-19","objectID":"/centos-7-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2shadowsocks-libev/:0:1","tags":["shadowsocks-libev"],"title":"CentOS 7 安装部署Shadowsocks-libev","uri":"/centos-7-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2shadowsocks-libev/"},{"categories":["科学上网"],"content":"二、安装Shadowsocks-libev 1.安装最新版的Shadowsocks-libev snap install shadowsocks-libev --edge 2.编写配置文件 快速获取配置文件 cd /var/snap/shadowsocks-libev/common/etc/shadowsocks-libev/ \u0026\u0026 wget -O config.json https://raw.githubusercontent.com/eebond/banwagong/main/shadowsocks-libev/config.json 配置文件位置 /var/snap/shadowsocks-libev/common/etc/shadowsocks-libev/config.json 配置文件内容 { \"server\":[\"::0\",\"0.0.0.0\"], \"server_port\":8389, \"encryption_method\":\"chacha20-ietf-poly1305\", \"password\":\"ks5g+uP4eYBto8rxfy5gJg==\", \"mode\":\"tcp_and_udp\", \"fast_open\":false } 生成强密码 openssl rand -base64 16 ","date":"2021-11-19","objectID":"/centos-7-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2shadowsocks-libev/:0:2","tags":["shadowsocks-libev"],"title":"CentOS 7 安装部署Shadowsocks-libev","uri":"/centos-7-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2shadowsocks-libev/"},{"categories":["科学上网"],"content":"三、运行Shadowsocks-libev 启动Shadowsocks-libev systemctl start snap.shadowsocks-libev.ss-server-daemon.service 设置开机自启动 systemctl enable snap.shadowsocks-libev.ss-server-daemon.service ","date":"2021-11-19","objectID":"/centos-7-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2shadowsocks-libev/:0:3","tags":["shadowsocks-libev"],"title":"CentOS 7 安装部署Shadowsocks-libev","uri":"/centos-7-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2shadowsocks-libev/"},{"categories":["科学上网"],"content":"四、维护 检查运行状态和日志 systemctl status snap.shadowsocks-libev.ss-server-daemon.service 重新加载配置文件 systemctl restart snap.shadowsocks-libev.ss-server-daemon.service 配置备用端口来缓解端口封锁 使用以下命令来将服务器从12000到12010端口接收到的TCP和UDP流量全部转发到8389端口： iptables -t nat -A PREROUTING -p tcp --dport 12000:12010 -j REDIRECT --to-port 8389 iptables -t nat -A PREROUTING -p udp --dport 12000:12010 -j REDIRECT --to-port 8389 输入一下命令，查看是否配置成功 iptables -t nat -L PREROUTING -nv --line-number ","date":"2021-11-19","objectID":"/centos-7-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2shadowsocks-libev/:0:4","tags":["shadowsocks-libev"],"title":"CentOS 7 安装部署Shadowsocks-libev","uri":"/centos-7-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2shadowsocks-libev/"},{"categories":["Hexo"],"content":"为什么需要备份和迁移？ 一般情况下，我们博客的相关配置信息都是在本地操作的, 但是当我们更换了设备或者电脑出现故障了等，那么我们便无法再维护我们的博客了。因而为了保护我们的劳动成果以及将来能更方便的维护博客，我们需要对博客进行备份和迁移，也就是将博客的相关配置信息上传到github上进行托管。日后有必要的时候可以从github上克隆到本地进行博客的维护等操作。 我在windows10上安装的Hexo博客，如果要换电脑或者换系统就要转移Hexo博客，之后我将Hexo博客转移到Ubuntu20.04上以便我在使用Ubuntu系统时也可以写博客。 ","date":"2021-11-17","objectID":"/hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%81%E7%A7%BB/:1:0","tags":["Hexo"],"title":"Hexo博客备份和迁移","uri":"/hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%81%E7%A7%BB/"},{"categories":["Hexo"],"content":"备份 ","date":"2021-11-17","objectID":"/hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%81%E7%A7%BB/:2:0","tags":["Hexo"],"title":"Hexo博客备份和迁移","uri":"/hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%81%E7%A7%BB/"},{"categories":["Hexo"],"content":"思路 在搭建博客的时候，我们已经将博客部署到了github上去，其实部署上去只是生成的静态文件。因而还需要将hexo生成的网站源文件也push到github上。这个时候需要再github上创建分支，其中主分支master已经存放了生成的静态网页。 以下操作在windows10上进行 ","date":"2021-11-17","objectID":"/hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%81%E7%A7%BB/:2:1","tags":["Hexo"],"title":"Hexo博客备份和迁移","uri":"/hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%81%E7%A7%BB/"},{"categories":["Hexo"],"content":"处理过程 删除.git 将hexo的主题下的.git删除，比如删除themes/next/目录下的.git否则无法将主题文件夹push。 创建.gitignore 在本地blog文件夹下创建文件.gitignore，正常情况这个文件是自动生成的，打开后写入： .DS_Store Thumbs.db db.json *.log node_modules/ public/ .deploy*/ 这个文件的存在是指在push的时候忽略文件中的文件格式。 创建本地分支 在本地blog文件夹中执行命令 #git初始化 git init #创建hexo分支，用来存放源码 git checkout -b hexo #git 文件添加 git add . #git 提交 git commit -m \"backup\" #添加远程仓库，github上的博客仓库 git remote add origin 博客仓库地址 #push到hexo分支 git push origin hexo ","date":"2021-11-17","objectID":"/hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%81%E7%A7%BB/:2:2","tags":["Hexo"],"title":"Hexo博客备份和迁移","uri":"/hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%81%E7%A7%BB/"},{"categories":["Hexo"],"content":"迁移 以下操作在Ubuntu系统上进行 ","date":"2021-11-17","objectID":"/hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%81%E7%A7%BB/:3:0","tags":["Hexo"],"title":"Hexo博客备份和迁移","uri":"/hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%81%E7%A7%BB/"},{"categories":["Hexo"],"content":"安装Hexo 1.安装git sudo apt-get install git -y 2.安装Node.js 安装Node.js的最佳方式是使用nvm. curl https://raw.github.com/creationix/nvm/master/install.sh | bash 安装完成后，重启终端并执行下列命令即可安装Node.js。 source ~./profile nvm install stable 安装Hexo npm install hexo-cli -g 至此，Hexo的安装完成了。 ","date":"2021-11-17","objectID":"/hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%81%E7%A7%BB/:3:1","tags":["Hexo"],"title":"Hexo博客备份和迁移","uri":"/hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%81%E7%A7%BB/"},{"categories":["Hexo"],"content":"从GitHub下载备份并安装 1.配置远程仓库的访问权限 ssh-keygen -t rsa 将生成的公钥添加到GitHub的SSH-Keyd的列表中。 2.下载备份 mkdir myblog git clone -b hexo \u003c远程仓库地址\u003e 3.安装 进入myblog目录 npm install 之后就可以正常使用了。 ","date":"2021-11-17","objectID":"/hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%81%E7%A7%BB/:3:2","tags":["Hexo"],"title":"Hexo博客备份和迁移","uri":"/hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%81%E7%A7%BB/"},{"categories":["Linux"],"content":"该工具需要在支持文件传输的终端工具中使用，如xshell可以，而putty不能。 ","date":"2021-11-16","objectID":"/lrzsz%E5%B7%A5%E5%85%B7-linux%E5%92%8Cwindows%E4%B9%8B%E9%97%B4%E4%BA%92%E4%BC%A0%E6%96%87%E4%BB%B6/:0:0","tags":["lrzsz"],"title":"lrzsz工具 Linux和Windows之间互传文件","uri":"/lrzsz%E5%B7%A5%E5%85%B7-linux%E5%92%8Cwindows%E4%B9%8B%E9%97%B4%E4%BA%92%E4%BC%A0%E6%96%87%E4%BB%B6/"},{"categories":["Linux"],"content":"安装lrzsz工具 yum install -y lrzsz ","date":"2021-11-16","objectID":"/lrzsz%E5%B7%A5%E5%85%B7-linux%E5%92%8Cwindows%E4%B9%8B%E9%97%B4%E4%BA%92%E4%BC%A0%E6%96%87%E4%BB%B6/:0:1","tags":["lrzsz"],"title":"lrzsz工具 Linux和Windows之间互传文件","uri":"/lrzsz%E5%B7%A5%E5%85%B7-linux%E5%92%8Cwindows%E4%B9%8B%E9%97%B4%E4%BA%92%E4%BC%A0%E6%96%87%E4%BB%B6/"},{"categories":["Linux"],"content":"Linux端接收来自Windows端的文件 rz 输入命令后会弹出文件选择框 \" \r ","date":"2021-11-16","objectID":"/lrzsz%E5%B7%A5%E5%85%B7-linux%E5%92%8Cwindows%E4%B9%8B%E9%97%B4%E4%BA%92%E4%BC%A0%E6%96%87%E4%BB%B6/:0:2","tags":["lrzsz"],"title":"lrzsz工具 Linux和Windows之间互传文件","uri":"/lrzsz%E5%B7%A5%E5%85%B7-linux%E5%92%8Cwindows%E4%B9%8B%E9%97%B4%E4%BA%92%E4%BC%A0%E6%96%87%E4%BB%B6/"},{"categories":["Linux"],"content":"Linux端发送文件到windows端 sz [文件路径] 输入命令后会弹出文件保存位置选择框 \" \r ","date":"2021-11-16","objectID":"/lrzsz%E5%B7%A5%E5%85%B7-linux%E5%92%8Cwindows%E4%B9%8B%E9%97%B4%E4%BA%92%E4%BC%A0%E6%96%87%E4%BB%B6/:0:3","tags":["lrzsz"],"title":"lrzsz工具 Linux和Windows之间互传文件","uri":"/lrzsz%E5%B7%A5%E5%85%B7-linux%E5%92%8Cwindows%E4%B9%8B%E9%97%B4%E4%BA%92%E4%BC%A0%E6%96%87%E4%BB%B6/"},{"categories":["docker"],"content":"一、 安装Docker环境 1.使用官方安装脚本自动安装 安装命令如下： curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun 也可以使用国内daocloud一键安装命令： curl -sSL https://get.daocloud.io/docker | sh 2.使用Docker仓库进行安装 下载关于Docker的依赖环境 yum -y install yum-utils device-mapper-persistent-data lvm2 设置下载Docker的镜像源 使用官方源（国内较慢） yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 国内的源地址 阿里云 yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 清华大学源 yum-config-manager --add-repo https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo 安装Docker yum makacache fast yum -y install docker-ce ","date":"2021-11-15","objectID":"/centos-7%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BDdocker/:0:1","tags":["docker"],"title":"CentOS 7安装与卸载docker","uri":"/centos-7%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BDdocker/"},{"categories":["docker"],"content":"二、清理卸载Docker环境 1.杀死所有运行容器 docker kill $(docker ps -a -q) 2.删除所有容器 docker rm $(docker ps -a -q) 3.删除所有镜像 docker rmi $(docker images -q) 4.停止docker服务 systemctl stop docker 5.删除存储目录 rm -rf /etc/docker rm -rf /run/docker rm -rf /var/lib/docker 6.卸载docker 查看已安装的docker包 yum list installed | grep docker 卸载相关包 yum remove docker* ","date":"2021-11-15","objectID":"/centos-7%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BDdocker/:0:2","tags":["docker"],"title":"CentOS 7安装与卸载docker","uri":"/centos-7%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BDdocker/"},{"categories":["Centos7"],"content":" 网站使用 HTTPS 协议已是大势所趋，而要在 web 上使用 HTTPS 的话，我们首先需要获得一个 SSL 证书文件。本文介绍如何在 CentOS7 + Nginx 环境下，安装使用 Let’s Encrypt 免费 SSL 证书。 ","date":"2021-11-11","objectID":"/centos%E4%B8%8B%E4%BD%BF%E7%94%A8certbot%E7%94%B3%E8%AF%B7%E9%83%A8%E7%BD%B2let-s-encrpyt%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6ngingx%E6%9C%8D%E5%8A%A1%E5%99%A8/:0:0","tags":["certbot"],"title":"CentOS下使用certbot申请、部署Let's Encrypt免费SSL证书（Ngingx服务器)","uri":"/centos%E4%B8%8B%E4%BD%BF%E7%94%A8certbot%E7%94%B3%E8%AF%B7%E9%83%A8%E7%BD%B2let-s-encrpyt%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6ngingx%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["Centos7"],"content":"1.准备工作 (1)首先安装Nginx服务器，并确保正常运行。 yum install nginx -y systemctl start nginx //启动Nginx systemctl enable nginx //设置Nginx开机自启动 (2)服务器要开放80端口以及443端口 firewall-cmd --permanent --add-port=80/tcp firewall-cmd --permanent --add-port=443/tcp firewall-cmd --reload （3）需要有自己的域名，并在域名服务器创建一台A记录，指向服务器的公网IP。比如我这里使用blog.eebond.xyz这个域名。等域名解析生效后，访问：http://blog.eebond.xyz ,可以看到如下页面则说明域名解析成功、Nginx服务器正常运行： \r \" \r ","date":"2021-11-11","objectID":"/centos%E4%B8%8B%E4%BD%BF%E7%94%A8certbot%E7%94%B3%E8%AF%B7%E9%83%A8%E7%BD%B2let-s-encrpyt%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6ngingx%E6%9C%8D%E5%8A%A1%E5%99%A8/:0:1","tags":["certbot"],"title":"CentOS下使用certbot申请、部署Let's Encrypt免费SSL证书（Ngingx服务器)","uri":"/centos%E4%B8%8B%E4%BD%BF%E7%94%A8certbot%E7%94%B3%E8%AF%B7%E9%83%A8%E7%BD%B2let-s-encrpyt%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6ngingx%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["Centos7"],"content":"2.安装certbot工具 我们采用certbot脚本方式申请let’s Encrypt证书，依次执行如下命令安装该工具： yum install -y epel-release yum install -y certbot ","date":"2021-11-11","objectID":"/centos%E4%B8%8B%E4%BD%BF%E7%94%A8certbot%E7%94%B3%E8%AF%B7%E9%83%A8%E7%BD%B2let-s-encrpyt%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6ngingx%E6%9C%8D%E5%8A%A1%E5%99%A8/:0:2","tags":["certbot"],"title":"CentOS下使用certbot申请、部署Let's Encrypt免费SSL证书（Ngingx服务器)","uri":"/centos%E4%B8%8B%E4%BD%BF%E7%94%A8certbot%E7%94%B3%E8%AF%B7%E9%83%A8%E7%BD%B2let-s-encrpyt%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6ngingx%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["Centos7"],"content":"3.申请证书 （1）接下来我们要使用certbot命令初次申请证书，命令格式如下： certbot certonly --webroot -w [Web站点目录] -d [站点域名] -m [联系人email地址] --agree-tos 还有不设web站点的申请方式： certbot certonly --standalone -d [站点域名] （2）这里我执行如下命令，读者根据实际情况修改： certbot certonly --webroot -w /srv/www/blog -d eebond.xyz -m eebond0327@gmail.com --agree-tos （3）申请成功后，证书会保存在 /etc/letsencrypt/live/demo.hangge.com/ 下面： \" \r （4）使用如下命令可以查看证书的有效期： openssl x509 -noout -dates -in /etc/letsencrypt/live/blog.eebond.xyz/cert.pem \r \" \r ","date":"2021-11-11","objectID":"/centos%E4%B8%8B%E4%BD%BF%E7%94%A8certbot%E7%94%B3%E8%AF%B7%E9%83%A8%E7%BD%B2let-s-encrpyt%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6ngingx%E6%9C%8D%E5%8A%A1%E5%99%A8/:0:3","tags":["certbot"],"title":"CentOS下使用certbot申请、部署Let's Encrypt免费SSL证书（Ngingx服务器)","uri":"/centos%E4%B8%8B%E4%BD%BF%E7%94%A8certbot%E7%94%B3%E8%AF%B7%E9%83%A8%E7%BD%B2let-s-encrpyt%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6ngingx%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["Centos7"],"content":"4.证书更新 （1）Let’s Encrypt 证书的有效期是 90 天，需要长期使用的话，需要在失效前进行延长申请。我们可以执行如下命令去更新： //更新证书 certbot renew --dry-run //如果不需要返回的信息，可以用静默方式 certbot renew --quiet （2）我们也可以将更新证书的脚本写到定时任务来自动完成，免得我们手动操作。首先执行如下命令开始编辑定时任务： crontab -e （3）此时会进入 vi 的编辑界面让你编辑工作（每项工作都是一行）。我们在末尾添加如下一行内容，表示每月 1 号 5 时会执行执行一次更新，并重启 nginx 服务器： 00 05 01 * * /usr/bin/certbot renew --quiet \u0026\u0026 /bin/systemctl restart nginx 不设站点目录的生成证书方式，需要先关闭nginx服务器再更新证书 00 05 01 * * /usr/bin/certbot renew --dry-run --pre-hook \"service nginx stop\" --post-hook \"service nginx start\" ","date":"2021-11-11","objectID":"/centos%E4%B8%8B%E4%BD%BF%E7%94%A8certbot%E7%94%B3%E8%AF%B7%E9%83%A8%E7%BD%B2let-s-encrpyt%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6ngingx%E6%9C%8D%E5%8A%A1%E5%99%A8/:0:4","tags":["certbot"],"title":"CentOS下使用certbot申请、部署Let's Encrypt免费SSL证书（Ngingx服务器)","uri":"/centos%E4%B8%8B%E4%BD%BF%E7%94%A8certbot%E7%94%B3%E8%AF%B7%E9%83%A8%E7%BD%B2let-s-encrpyt%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6ngingx%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["Centos7"],"content":"5.配置Nginx （1）编写nginx配置文件： vim /etc/nginx/conf.d/cloud.conf （2）修改默认的server_name、 ssl_certificate、 ssl_certificate_key等地方 server { listen 80; listen [::]:80; server_name blog.eebond.xyz; rewrite ^(.*)$ https://$host$1 permanent; } # Settings for a TLS enabled server. server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name blog.eebond.xyz; root /srv/www/blog; ssl_certificate \"/etc/letsencrypt/live/blog.eebond.xyz/fullchain.pem\"; ssl_certificate_key \"/etc/letsencrypt/live/blog.eebond.xyz/privkey.pem\"; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; error_page 404 /404.html; location = /40x.html { } error_page 500 502 503 504 /50x.html; location = /50x.html { } } （3）保存退出后，重新加载Nginx配置文件： nginx -s reload (4)再次使用浏览器访问http://blog.eebond.xyz ，如果正常跳转到https://blog.eebond.xyz ，并且地址栏有个小锁图标，则说明https配置成功了： \r \" \r 我这里是把我的博客部署到上面了，有时候输入blog.eebond.xyz没有小锁，可能是浏览器之前访问过，有缓存。 ","date":"2021-11-11","objectID":"/centos%E4%B8%8B%E4%BD%BF%E7%94%A8certbot%E7%94%B3%E8%AF%B7%E9%83%A8%E7%BD%B2let-s-encrpyt%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6ngingx%E6%9C%8D%E5%8A%A1%E5%99%A8/:0:5","tags":["certbot"],"title":"CentOS下使用certbot申请、部署Let's Encrypt免费SSL证书（Ngingx服务器)","uri":"/centos%E4%B8%8B%E4%BD%BF%E7%94%A8certbot%E7%94%B3%E8%AF%B7%E9%83%A8%E7%BD%B2let-s-encrpyt%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6ngingx%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["党的理论学习"],"content":"学习习近平思想，争做新青年 ","date":"2021-04-11","objectID":"/%E4%B9%A0%E8%BF%91%E5%B9%B3%E6%80%9D%E6%83%B3%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:0","tags":["习近平思想"],"title":"习近平思想理论学习笔记","uri":"/%E4%B9%A0%E8%BF%91%E5%B9%B3%E6%80%9D%E6%83%B3%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["党的理论学习"],"content":"科技创新 要坚定不移走中国特色自主创新道路，深化科技体制改革,不断开创国家创新发展新局面，加快从经济大国走向经济强国。 ——2013年3月4日，习近平总书记看望参加全国政协十二届一次会议科协、科技界委员联组会时指出 创新是引领发展的第一动力。抓创新就是抓发展,谋创新就是谋未来。必须破除体制机制障碍,使创新成果更快转化为现实生产力。 ——2015年3月5曰，习近平总书记参加十二居全国人大三次会议上海代表团审议时指出 创新发展理念是方向,是钥匙,首要的是创新。 ——2016年3月5日、习近平总书记参加十二届全国人大四次会议上海代表团审议时指出 发展是第一要务，人才是第一资源,创新是第一动力。中国如果不走创新驱动发展道路，新旧动能不能顺利转换，就不能真正强大起来。强起来要靠创新，创新要靠人才。 ——2018年3月7日，习近平总书记参加十三届全国人大一次会议广东代表团参加审议时指出 要坚持问题导向,解放思想,通过全面深化改革开放,给创新创业创造以更好的环境,着力解决影响创新创业创造的突出体制机制问题,营造鼓励创新创业创造的社会氛围，特别是要为中小企业、年轻人发展提供有利条件，为高技术企业成长建立加速机制。 ——2019年3月10日，习近平总书记参加十三届全国人大二次会议福建代表团审议时指出 ","date":"2021-04-11","objectID":"/%E4%B9%A0%E8%BF%91%E5%B9%B3%E6%80%9D%E6%83%B3%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:1","tags":["习近平思想"],"title":"习近平思想理论学习笔记","uri":"/%E4%B9%A0%E8%BF%91%E5%B9%B3%E6%80%9D%E6%83%B3%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["党的理论学习"],"content":"经济发展 要深化产业结构调整,构建现代产业发展新体系,抓住化解产能过剩矛盾这一工作重点，使我国经济发展提高质量、增加效益、增强后劲。 ——2013年3月8日，习近平总书记参加十二届全国人大一次会议江苏代表团审议时指出 要扬长避短、杨长克短、扬长补短,向经济建设这个中心聚焦发力打好发展组合拳，奋力走出全面振兴新路子。 ———2016年3月7百，习近平总书记参加十二届全国人大四次会议黑龙江代表团审议时指出 构建推动经济高质量发展的体制机制是一个系统工程，要通盘考虑、着眼长远，突出重点、抓住关键。 —2018年3月7日,习近平总书记参加十三届全国人大一次会议广东代表团审议时指出 要坚持用全面、辩证、长远的眼光分析当前经济形势,努力在危机中育新机、于变局中开新局。 ——2020年5月23日，习近平总书记看望参加全国政协十三届三次会议的经济界委员时指出 走高质量发展之路，就要坚持以人民为中心的发展思想,坚持创新、协调、绿色、开放、共享发展。 ———2021年3月了日，习近平总书记参加十三届全国人大四次会议青海代表团审议时指出 ","date":"2021-04-11","objectID":"/%E4%B9%A0%E8%BF%91%E5%B9%B3%E6%80%9D%E6%83%B3%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:2","tags":["习近平思想"],"title":"习近平思想理论学习笔记","uri":"/%E4%B9%A0%E8%BF%91%E5%B9%B3%E6%80%9D%E6%83%B3%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["党的理论学习"],"content":"改革开放 广东在改革开放中很好发挥了窗口作用、试验作用、排头兵作用。要继续发扬敢为人先的精神,勇于先行先试,大胆实践探索,坚持社会主义市场经济改革方向，加快完善现代市场体系,加快转变政府职能,协同推进各领域改革,实施更加积极主动的开放战略。 ——2014年3月6日，习近平总书记参加十二届全国人大二次会议广东代表团审议时指出 中国开放的大门不会关上,要坚持全方位对外开放,继续推动贸易和投资自由化便利化。 ——2017年3月5日,习近平总书记参加十二届全国人大五次会议上海代表团审议时指出 要以更宽广的视野、更高的目标要求、更有力的举措推动全面开放,加快发展更高层次的开放型经济，加快培育贸易新业态新模式,积极参与“一带—路”建设，加强创新能力开放合作。 —2018年3月7日、习近平总书记参加十三届全国人大一次会议广东代表团审议时指出 要向改革开放要动力,最大限度释放全社会创新创亚创造动能,不断增强我国在世界大变局中的影响力、竟争力。 ———2019年3月10日，习近平总书记参加十三届全国人大二次会议福建代表团审议时指出 现在国际上保护主义思潮上升,但我们要站在历史正确的一边,坚持多边主义和国际关系民主化,以开放、合作、共羸胸怀谋划发展,坚定不移推动经济全球化朝着开放、包容、普惠、平衡、共赢的方向发展,推动建设开放型世界经济。 ——2020年5月23日，习近平总书记看望参加全国政协十三届三次会议的经济界委员时指出 ","date":"2021-04-11","objectID":"/%E4%B9%A0%E8%BF%91%E5%B9%B3%E6%80%9D%E6%83%B3%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:3","tags":["习近平思想"],"title":"习近平思想理论学习笔记","uri":"/%E4%B9%A0%E8%BF%91%E5%B9%B3%E6%80%9D%E6%83%B3%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["党的理论学习"],"content":"社会治理 加强和创新社会治理,关键在体制创新,核心是人，只有人与人和谐相处，社会才会安定有序。社会治理的重心必须落到城乡社区,社区服务和管理能力强了,社会治理的基础就实了。 -—2014年3月5日,习近平总书记参加卡二届全国人大二次会议上海代表团审议时指出 要发挥社会各方面作用,激发全社会活力，群众的事同群众多商量,大家的事人人参与。 —2017年3月5日，习近平总书记参加十二届全国人大五次会议上海代表团审议时指出 要形成有效的社会治理、良好的社会秩序，促进社会公平正义，让人民群众安居乐业，获得感、幸福感、安全感更加充实、更有保障、更可持续。 ——2018年3月7日,习近平总书记参加十三届全国人大一次会议广东代表团审议时指出 基础非常重要,基础不牢、地动山摇。在基层就是党支部,上面千条线、下面一根针,必须芬实基层。要有千千万万优秀基层骨干,结合实际情况落实好各项工作。 2018年3月10日，习近平总书记参加十三届全国人大一次会议重庆代表团审议时指出 要坚持整体谋划、系统重塑、全面提升，改革疾病预防控制体系,提升疫情监测预警和应急响应能力,健全重大疫情救治体系,完善公共卫生应急法律法规,深入开展爱国卫生运动,着力从体制机制层面理顺关系、强化责任。 ——2020年5月24日，习近平总书记参加十三届全国人大三次会议湖北团审议时指出 ","date":"2021-04-11","objectID":"/%E4%B9%A0%E8%BF%91%E5%B9%B3%E6%80%9D%E6%83%B3%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:4","tags":["习近平思想"],"title":"习近平思想理论学习笔记","uri":"/%E4%B9%A0%E8%BF%91%E5%B9%B3%E6%80%9D%E6%83%B3%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["党的理论学习"],"content":"共同富裕 要看真贫、扶真贫、真扶贫,少搞一些盆景，多搞一些惠及广大贫困人口的实事。 ——2015年3月8日，习近平总书记参加十二届全国入大三次会议广西代表团审议时指出 脱贫攻坚一定要扭住精准,做到精准扶贫、精准脱贫,精准到户、精准到人，找对“穷根”，明确靶向。 ——2016年3月10日，习近平总书记参加十二届全国人大四次会议青海代表团审议时指出 农业强不强、农村美不美、农民富不富，决定着全面小康社会的成色和社会主义现代化的质量。要深刻认识实施乡村振兴战略的重要性和必要性,扎扎实实把乡村振兴战略实施好。 ——2018年3月8日，习近平总书记参加十三届全国人大一次会议山东代表团审议时指出 我们这一代人有这样一个情结,一定要把我们的老百姓特别是我们的农民扶一把,社会主义道路上一个也不能少,共同富裕、全面小康,大家一起走这条路。 ——2020年5月23日，习近平总书记看望参加全国政协十三届三次会议的经济界委员参加联组会时指出 脱贫摘帽不是终点,而是新生活、新奋斗的起点。解决发展不平衡不充分问题、缩小城乡区域发展差距、实现人的全面发展和全体人民共同富裕，仍然任重道远。 ———2021年3月5日，习近平总书记参加十三届全国人大四次会议内家古代表团审议时指出 ","date":"2021-04-11","objectID":"/%E4%B9%A0%E8%BF%91%E5%B9%B3%E6%80%9D%E6%83%B3%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:5","tags":["习近平思想"],"title":"习近平思想理论学习笔记","uri":"/%E4%B9%A0%E8%BF%91%E5%B9%B3%E6%80%9D%E6%83%B3%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["党的理论学习"],"content":"绿色发展 正确处理好生态环境保护和发展的关系，因地制宜选择好发展产业，让绿水青山充分发挥经济社会效益,切实做到经济效益、社会效益、生态效益同步提升，实现百姓富、生态美有机统一。 ——2014年3月7日，习近平总书记参加十二届全国人大二次会议贵州代表团审议时指出 环境就是民生,青山就是美丽，蓝天也是幸福。要着力推动生态环境保护,像保护眼睛一样保护生态环境,像对待生命一样对待生态环境。 ——2015年3月6日，习近平总书记参加十二届全国人大三次会议江西代表团审议时指出 要探索以生态优先、绿色发展为导向的高质量发展新路子。 —2019年3月5日、习近平总书记参加十三届全国人大二次会议内蒙古代表团审议时指出 要保持加强生态文明建设的战略定力，牢固树立生态优先、绿色发展的导向，持续打好蓝天、碧水、净土保卫战,把祖国北疆这道万里绿色长城构筑得更加牢固。 ———2020年5月22日、习近平总书记参加十三届全国人大三次会议内蒙古代表团审议时指出 要坚持绿水青山就是金山银山的理念,坚定不移走生态优先、绿色发展之路。 ——2021年3月5日，习近平总书记参加十三届全国人大四次会议内蒙舌代表团审议时指出 ","date":"2021-04-11","objectID":"/%E4%B9%A0%E8%BF%91%E5%B9%B3%E6%80%9D%E6%83%B3%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:6","tags":["习近平思想"],"title":"习近平思想理论学习笔记","uri":"/%E4%B9%A0%E8%BF%91%E5%B9%B3%E6%80%9D%E6%83%B3%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["党的理论学习"],"content":"中国精神 实现中国梦必须弘扬中国精神。这就是以爱国主义为核心的民族精神,以改革创新为核心的时代精神。 ——2013年3月17日，习近平总书记在十二届全国人大一次会议闭幕会上发表重要讲话 红色基因就是要传承。中华民族从站起来、富起来到强起来，经历了多少坎坷，创造了多少奇迹,要让后代牢记,我们要不忘初心，永远不可迷失了方向和道路。 ——2018年3月8日，习近平总书记参加十三届全国人大一次会议山东代表团审议时指出 一切成就都归功于人民，一切荣耀都归属于人民。要战胜前进道路上的种种风险挑战,顺利实现中共十九大描绘的宏伟蓝图,必须紧紧依靠人民,汇集和激发近14亿人民的磅礴力量。 ——2019年3月4日，习近平总书记看望参加全国政协十三届二次会议政协会议的文艺界社科界委员时指出 中国共产党根基在人民、血脉在人民。党团结带领人民进行革命、建设、改革，根本目的就是为了让人民过上好日子，无论面临多大挑战和压力,无论付出多大牺牲和代价,这—点都始终不渝、毫不动摇。 ——2020年5月22日，习近平总书记参加十三届全国人大三次会议内蒙古代表团审议时指出 一切向前走,都不能忘记走过的路,走得再远、走到再光辉的未来,也不能忘记走过的过去，不能忘记为什么出发。 ——2021年3月5日，习近平总书记参加十三届全国人大四次会议内蒙古代表团审议时指出 ","date":"2021-04-11","objectID":"/%E4%B9%A0%E8%BF%91%E5%B9%B3%E6%80%9D%E6%83%B3%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:7","tags":["习近平思想"],"title":"习近平思想理论学习笔记","uri":"/%E4%B9%A0%E8%BF%91%E5%B9%B3%E6%80%9D%E6%83%B3%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]